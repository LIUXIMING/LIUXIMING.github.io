<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo插入图片</title>
      <link href="/2024/05/07/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
      <url>/2024/05/07/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p>平时写博客文章都是 markdown 格式，使用 Typora 编辑器。在搭建了图床后，使用新版本 Typora 和 PicGo 软件可以实现图片自动上传，非常方便写文章时的图片添加与存储。</p><h1 id="配置图床"><a href="#配置图床" class="headerlink" title="配置图床"></a>配置图床</h1><p>本文主要从以下4个部分来介绍：</p><p><strong>1 PicGo 安装与配置</strong></p><p><strong>2 图床搭建</strong></p><p><strong>3 Typora 配置 PicGo</strong></p><p><strong>4 可能遇到的问题</strong></p><p>下面就带大家一步步搭建出一个免费的图床！</p><h2 id="1-PicGo-安装与配置"><a href="#1-PicGo-安装与配置" class="headerlink" title="1 PicGo 安装与配置"></a>1 PicGo 安装与配置</h2><p>PicGo 是一个用于快速上传图片并获取图片URL链接的工具，选择合适的版本并下载，可访问PicGo的官方文档进一步了解其功能和用法。我使用的是 win10系统，下载的是最新的版本。下载可能会很慢，可借助迅雷进行下载。下载后双击进行安装，注意不要安装在C盘。</p><p><img src="/2024/05/07/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/v2-e1e7d47b39f0ee903719d460f26d9750_720w.webp" alt="img"></p><blockquote><p>PicGo 下载地址：<a href="https://link.zhihu.com/?target=https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a><br>使用指南：<a href="https://link.zhihu.com/?target=https://picgo.github.io/PicGo-Doc/zh/guide/">https://picgo.github.io/PicGo-Doc/zh/guide/</a></p></blockquote><p>PicGo 安装后需要进一步配置，本文简要介绍 PicGo 的两种配置，详细的可以参考使用指南。</p><p><strong>自定义快捷键：</strong></p><p>在Windows中，快捷上传的快捷键是 Ctrl+Shift+P，点击 PicoGo 左侧栏的 PicGo 设置和修改快捷键设置，可以按自己喜好修改快捷键。此外，PicGo 有快速截图并上传的功能，在插件设置中搜索 quick-capture，然后进行安装，默认的快捷键是Ctrl+Shift+0，也可以进行修改。</p><p><strong>上传前重命名：</strong></p><p>如果你想在图片上传前能够有机会改动你的图片名，我们可以在PicGo中打开上传前重命名开关，这样之后在上传的时候就会弹出一个小窗口让你重命名文件。如果你不想重命名，点击确定、取消或者直接关闭这个窗口都是可以的。如果你想要重命名就在输入框里输入想要更改的名字，然后点击确定即可。</p><h2 id="2-图床搭建"><a href="#2-图床搭建" class="headerlink" title="2 图床搭建"></a>2 图床搭建</h2><p>PicGo 支持的图床很多，如七牛图床、腾讯云 COS、阿里云 OSS、Github 图床、Gitee 图床等等，本文介绍的是基于 Github 和 Gitee 来搭建免费的图床。</p><h3 id="2-1-搭建-Github-图床"><a href="#2-1-搭建-Github-图床" class="headerlink" title="2.1 搭建 Github 图床"></a><strong>2.1 搭建 Github 图床</strong></h3><p><strong>新建Github仓库并生成Token：</strong></p><ul><li>注册 Github 用户</li><li>在 Github 上新建一个用于存储的仓库，点击 New repository 创建一个新仓库。</li></ul><p><img src="/2024/05/07/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/v2-d630774d543d71a82c50747431b92210_720w.webp" alt="img"></p><ul><li>生成一个 Personal access tokens</li></ul><p>在 Github 中依次点击<strong>Settings-&gt;Developer settings-&gt;Personal access tokens-&gt;Generate new token</strong>，勾选 repo 权限，填写描述，然后点击 Generate token 按钮，生成 token。由于生成的 token 只会在第一次显示，建议保存下来备用，否则后续只能重新生成 token。</p><p><img src="/2024/05/07/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/v2-feb2997ba918768683de4057e7ea26d2_720w.webp" alt="img"></p><p><strong>PicGo 配置 Github 图床：</strong></p><p>打开PicGo，点击图床设置，对Github图床进行设置。</p><p><img src="/2024/05/07/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/v2-5e0290963cc85d2748fe3c35be94d6ba_720w.webp" alt="img"></p><p>配置说明如下：</p><ul><li>设定仓库名：按照照“用户名&#x2F;仓库名”的格式填写，比如我的weylin&#x2F;ImgHosting。</li><li>设定分支名：默认主分支 master 即可。</li><li>设定 Token：将之前生成的 token 复制粘贴到这里。</li><li>指定存储路径：图床仓库目录下的子目录，默认是根目录。</li><li>设定自定义域名：自定义域名的作用是在上传图片后成功后，PicGo 将以“自定义域名+子目录名+图片名”生成访问连接。这里我们的自定义域名为：<a href="https://link.zhihu.com/?target=https://cdn.jsdelivr.net/gh/">https://cdn.jsdelivr.net/gh/</a>用户名&#x2F;仓库名，用的是<a href="https://link.zhihu.com/?target=http://cdn.jsdelivr.net">http://cdn.jsdelivr.net</a>提升图片的加载速度。</li></ul><h3 id="2-2-搭建-Gitee-图床"><a href="#2-2-搭建-Gitee-图床" class="headerlink" title="2.2 搭建 Gitee 图床"></a><strong>2.2 搭建 Gitee 图床</strong></h3><p><strong>新建 Gitee 仓库并生成个人 token：</strong></p><ul><li>注册 Gitee 账号</li><li>在 Gitee 上新建一个仓库，点击右上角+号新建仓库。</li></ul><p><img src="/2024/05/07/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/v2-c4f30b81b6a65fe9e85ddae5b4d34d4a_720w.webp" alt="img"></p><ul><li>生成个人 token</li></ul><p>在个人主页，找到安全设置栏的私人令牌，点击生成新令牌，填写描述信息，提交生成私人令牌。与 Github 生成 token一样，只会显示依次，要注意保存备用。</p><p><img src="/2024/05/07/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/v2-3164878c018c103bec2484128e579d6f_720w.webp" alt="img"></p><p><strong>PicGo 配置 Gitee 图床：</strong></p><p>PicGo 图床配置默认是没有 Gitee 图床的，需要我们安装 Gitee 插件。在PicGo 插件设置搜索 Gitee，两个插件可以选择一个安装。注意：安装插件前本机需要已安装 node.js，插件下载需要使用到 node.js 的npm。</p><blockquote><p>windows环境下安装node.js：<a href="https://link.zhihu.com/?target=https://jingyan.baidu.com/article/48b37f8dd141b41a646488bc.html">https://jingyan.baidu.com/article/48b37f8dd141b41a646488bc.html</a></p></blockquote><p><img src="/2024/05/07/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/v2-9ff85efad717efcc7cd9e646b9ef0a8a_720w.webp" alt="img"></p><p>返回到图床设置，开始设置 Gitee 图床：</p><p><img src="/2024/05/07/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/v2-f5a814ce21352fb83bd0be375b4ca9c9_720w.webp" alt="img"></p><p>配置说明如下：</p><ul><li>url：gitee地址，即<a href="https://link.zhihu.com/?target=https://gitee.com/">https://gitee.com/</a></li><li>owner：gitee用户名。</li><li>repo：图床仓库名。</li><li>path：图床仓库中的子目录，默认是根目录。</li><li>token：之前生成的私人令牌。</li><li>message：信息说明，可以不填。</li></ul><p>在完成上述图床搭建操作后，就可以使用 PicGo 来上传图片到 Github 或 Gitee，并生成图片访问链接了。我平时是使用 Typora 这个 Markdown 编辑器来写博客文章，之前插入图片是使用 PicGo上传到图床，然后将地址粘贴到 Typora 中。目前新版本的Typora已支持 PicGo 服务，可以通过设置Typora实现快速插入图片。</p><h2 id="3-Typora-配置-PicGo"><a href="#3-Typora-配置-PicGo" class="headerlink" title="3 Typora 配置 PicGo"></a>3 Typora 配置 PicGo</h2><p><strong>Typora 图像配置：</strong></p><p>依次打开 Typora 的文件-&gt;偏好设置-&gt;图像，进行配置：</p><p><img src="/2024/05/07/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/v2-cbbe5532884a09aa1e405e58cf5f50e6_720w.webp" alt="img"></p><p>然后，点击验证图片上传选项验证配置是否正确，由于我的 PicGo 中 PicGo-Server 设置中的监听端口默认为 36686，与下图中的 36677 不一致而验证失败，将PicGo中的端口设置为 36677 验证成功。</p><p><img src="/2024/05/07/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/v2-2f2e6ceae67422d66c3e0afe4e8a9ed9_720w.webp" alt="img"></p><p>到这里，我们已经成功将 Typora+PicGo+Github&#x2F;Gitee 配置好了，可以愉快的文章写作啦！将图片复制到 Typora 中，点击上传图片，即可将图片上传到 Gitee 图床仓库中。</p><h2 id="4-可能遇到的问题"><a href="#4-可能遇到的问题" class="headerlink" title="4 可能遇到的问题"></a><strong>4 可能遇到的问题</strong></h2><p>搭建好图床后，在上传图片时，可能会出现异常。</p><p><strong>出现 Failed to fetch：</strong></p><p>确认在 PicGo 中打开了 Server 服务，监听端口与 typora 检验端口保持一致。</p><p><strong>上传图片出现{“success”,false}：</strong></p><p>常常是由于文件名冲突引起的。如果不是，可重启服务和电脑尝试解决。</p><h1 id="插入本都图片"><a href="#插入本都图片" class="headerlink" title="插入本都图片"></a>插入本都图片</h1><p>插入图片的时候走了不少弯路，写篇blog记录一下。</p><h2 id="第一步：安装插件，在hexo根目录打开Git-Bash-执行"><a href="#第一步：安装插件，在hexo根目录打开Git-Bash-执行" class="headerlink" title="第一步：安装插件，在hexo根目录打开Git Bash,执行"></a>第一步：安装插件，在hexo根目录打开Git Bash,执行</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><h2 id="第二步：打开hexo的配置文件-config-yml"><a href="#第二步：打开hexo的配置文件-config-yml" class="headerlink" title="第二步：打开hexo的配置文件_config.yml"></a>第二步：打开hexo的配置文件_config.yml</h2><p>找到 post_asset_folder，把这个选项从false改成true</p><h2 id="第三步：打开"><a href="#第三步：打开" class="headerlink" title="第三步：打开"></a>第三步：打开</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/node_modules/hexo-asset-image/index.js</span><br></pre></td></tr></table></figure><p>将内容更换为下面的代码<br> （在此感谢Ericam_ 大神：<a href="https://links.jianshu.com/go?to=https://blog.csdn.net/xjm850552586">https://blog.csdn.net/xjm850552586</a>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">var cheerio = require(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class="line"><span class="keyword">function</span> getPosition(str, m, i) &#123;</span><br><span class="line">  <span class="built_in">return</span> str.split(m, i).<span class="built_in">join</span>(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var version = String(hexo.version).<span class="built_in">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="keyword">function</span>(data)&#123;</span><br><span class="line">  var config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">        var <span class="built_in">link</span> = data.permalink;</span><br><span class="line">    <span class="keyword">if</span>(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)</span><br><span class="line">       var beginPos = getPosition(<span class="built_in">link</span>, <span class="string">&#x27;/&#x27;</span>, 1) + 1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       var beginPos = getPosition(<span class="built_in">link</span>, <span class="string">&#x27;/&#x27;</span>, 3) + 1;</span><br><span class="line">    // In hexo 3.1.1, the permalink of <span class="string">&quot;about&quot;</span> page is like <span class="string">&quot;.../about/index.html&quot;</span>.</span><br><span class="line">    var endPos = link.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + 1;</span><br><span class="line">    <span class="built_in">link</span> = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    var toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(var i = 0; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      var key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      var $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).each(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(this).attr(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">            // For windows style path, we replace <span class="string">&#x27;\&#x27;</span> to <span class="string">&#x27;/&#x27;</span>.</span><br><span class="line">            var src = $(this).attr(<span class="string">&#x27;src&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(!/http[s]*.*|\/\/.*/.test(src) &amp;&amp;</span><br><span class="line">               !/^\s*\//.test(src)) &#123;</span><br><span class="line">              // For <span class="string">&quot;about&quot;</span> page, the first part of <span class="string">&quot;src&quot;</span> can<span class="string">&#x27;t be removed.</span></span><br><span class="line"><span class="string">              // In addition, to support multi-level local directory.</span></span><br><span class="line"><span class="string">              var linkArray = link.split(&#x27;</span>/<span class="string">&#x27;).filter(function(elem)&#123;</span></span><br><span class="line"><span class="string">                return elem != &#x27;</span><span class="string">&#x27;;</span></span><br><span class="line"><span class="string">              &#125;);</span></span><br><span class="line"><span class="string">              var srcArray = src.split(&#x27;</span>/<span class="string">&#x27;).filter(function(elem)&#123;</span></span><br><span class="line"><span class="string">                return elem != &#x27;</span><span class="string">&#x27; &amp;&amp; elem != &#x27;</span>.<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">              &#125;);</span></span><br><span class="line"><span class="string">              if(srcArray.length &gt; 1)</span></span><br><span class="line"><span class="string">                srcArray.shift();</span></span><br><span class="line"><span class="string">              src = srcArray.join(&#x27;</span>/<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">              $(this).attr(&#x27;</span>src<span class="string">&#x27;, config.root + link + src);</span></span><br><span class="line"><span class="string">              console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;else&#123;</span></span><br><span class="line"><span class="string">            console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span></span><br><span class="line"><span class="string">            console.info&amp;&amp;console.info($(this));</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;);</span></span><br><span class="line"><span class="string">      data[key] = $.html();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure><h2 id="第四步：现在就可以插入图片了"><a href="#第四步：现在就可以插入图片了" class="headerlink" title="第四步：现在就可以插入图片了"></a>第四步：现在就可以插入图片了</h2><p>在hexo new post photo之后<br>就在source&#x2F;_posts生成photo.md文件和photo文件夹，我们把要插入的图片复制到photo文件夹内，<br>在photo.md文件里面按markdown的标准写,（我的文件名是head.jpeg）比如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![这是代替图片的文字，随便写](C:/head.jpeg)</span><br></pre></td></tr></table></figure><p>注意这里文件路径要加上盘符。</p>]]></content>
      
      
      <categories>
          
          <category> 实用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 插入图片 </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wifi-debian</title>
      <link href="/2024/05/07/wifi-debian/"/>
      <url>/2024/05/07/wifi-debian/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近我在网上看到一款骁龙 410 SoC 的随身 WiFi，性价比高，领券后十元以下就能买到。更重要的是，这款 SoC 的随身 WiFi 能刷 Debian 系统。你可以在上面搭建网站甚至 MC 服务器，也可以接上扩展版当 Linux 开发板用，可玩性很高。</p><p>本文记录一下刷机的步骤和注意事项。</p><h2 id="硬件配置"><a href="#硬件配置" class="headerlink" title="硬件配置"></a>硬件配置</h2><p>这款随身 WiFi 配置如下：</p><table><thead><tr><th>SoC</th><th>骁龙410（MSM8916）四核 Cortex-A53，64 位</th></tr></thead><tbody><tr><td>内存</td><td>512MB</td></tr><tr><td>存储</td><td>4GB</td></tr><tr><td>版号</td><td>UFI001C、UFI001B、UFI003、UZ801、SP970</td></tr></tbody></table><p><strong>不是骁龙 410 SoC 的随身 WiFi 无法刷机，请知悉。</strong></p><h2 id="所需文件"><a href="#所需文件" class="headerlink" title="所需文件"></a>所需文件</h2><ul><li><a href="https://www.123pan.com/s/7368Vv-3TyQh.html">高通 9008 驱动</a></li><li><a href="https://googledownloads.cn/android/repository/platform-tools-latest-windows.zip">ADB 工具</a></li><li><a href="https://www.123pan.com/s/7368Vv-hTyQh.html">Miko 备份工具</a></li><li><a href="https://www.123pan.com/s/XwVDVv-WICn3">Debian 刷机包</a></li></ul><p>如果不确定下载哪个，请先查看板子型号再下载刷机包。</p><h2 id="查看板子型号"><a href="#查看板子型号" class="headerlink" title="查看板子型号"></a>查看板子型号</h2><p>用螺丝刀将随身 WiFi 的外壳拆开，查看板子上方的丝印，型号一般以 UFI、UZ 或 SP 开头。如红框中所示，我买到的型号是 UFI003。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576ce22e2579.jpg"><img src="/2024/05/07/wifi-debian/6576ce22e2579.jpg" alt="1702214357490"></a></p><h2 id="安装-9008-驱动"><a href="#安装-9008-驱动" class="headerlink" title="安装 9008 驱动"></a>安装 9008 驱动</h2><p>执行 <code>driver.exe</code>，并点击立即安装。在弹出如下窗口中，点击“安装”。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576ce32c14a5.png"><img src="/2024/05/07/wifi-debian/6576ce32c14a5.png" alt="image-20231204174343852"></a></p><h2 id="安装-ADB-工具"><a href="#安装-ADB-工具" class="headerlink" title="安装 ADB 工具"></a>安装 ADB 工具</h2><p>解压 <code>platform-tools_r34.0.5-windows.zip</code>，并将解压目录添加到环境变量。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576ce3d09e64.png"><img src="/2024/05/07/wifi-debian/6576ce3d09e64.png" alt="image-20231210224939537"></a></p><p>打开命令提示符，执行 <code>adb version</code>。有如下输出，则表明配置正确。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Thinkpad&gt;adb version</span><br><span class="line">Android Debug Bridge version 1.0.41</span><br><span class="line">Version 34.0.5-10900879</span><br><span class="line">Installed as D:\platform-tools\adb.exe</span><br><span class="line">Running on Windows 10.0.19045</span><br></pre></td></tr></table></figure><h2 id="安装-Miko-备份工具"><a href="#安装-Miko-备份工具" class="headerlink" title="安装 Miko 备份工具"></a>安装 Miko 备份工具</h2><p>解压 <code>MiKo_Loder Pro.zip</code>，运行 <code>miko.exe</code> 安装备份工具。安装完成后，桌面上会出现 Miko 备份工具的快捷方式。在图标上右键，打开文件所在位置，将解压得到的 <code>Loader.exe</code> 复制到 Miko 安装目录即可。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576ce44c7690.png"><img src="/2024/05/07/wifi-debian/6576ce44c7690.png" alt="image-20231210215138055"></a></p><h2 id="开启-ADB"><a href="#开启-ADB" class="headerlink" title="开启 ADB"></a>开启 ADB</h2><p>将随身 WiFi 插入电脑 USB 接口。打开设备管理器，如果此时多了一个名叫 <code>Android Composite ADB Interface</code> 的设备，则表明随身 WiFi 已经开启 ADB，无需执行其他操作。</p><p>如果没有出现这个设备，则需要手动开启 ADB。以 <code>UZ801</code> 型号为例，连上随身 WiFi 的热点，并访问 <a href="http://192.168.100.1/usbdebug.html">http://192.168.100.1/usbdebug.html</a> 即可开启 ADB，再次访问即可关闭。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576ce6125f05.png"><img src="/2024/05/07/wifi-debian/6576ce6125f05.png" alt="image-20231210215947101"></a></p><h2 id="备份原厂固件"><a href="#备份原厂固件" class="headerlink" title="备份原厂固件"></a>备份原厂固件</h2><p>为避免刷错固件变砖等情况，强烈建议备份原厂固件。</p><p>打开命令提示符，执行 <code>adb reboot edl</code>，此时设备管理器中会多出高通 9008 设备。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576ce6c996b3.png"><img src="/2024/05/07/wifi-debian/6576ce6c996b3.png" alt="image-20231210221934063"></a></p><p>我们运行上文所提到的 <code>Loader.exe</code>（即 Miko 工具）进行备份数据。</p><p>此时窗口右侧显示设备信息，表明随身 WiFi 已被成功识别。如果显示 <strong>Not Found</strong> 字样，请重新安装 9008 驱动并再次尝试。</p><p>依次点击 <strong>Read</strong> –&gt;<strong>Partition Backup&#x2F;Erase</strong>–&gt;<strong>Load Partition Structure</strong>。然后双击红色 Option 下面的灰条，选择备份目录，并点击 <strong>Read Full Image</strong>。再次选择备份目录，并取一个文件名，点击确定，即可开始备份。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576ce79b5a9c.png"><img src="/2024/05/07/wifi-debian/6576ce79b5a9c.png" alt="image-20231210233137419"></a></p><p>等待几分钟，直到进度条达到 100%，右侧输出 Sucess 字样和用时，则表明备份完成 。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576ce8b43166.png"><img src="/2024/05/07/wifi-debian/6576ce8b43166.png" alt="image-20231210234948575"></a></p><h2 id="刷入-Debian"><a href="#刷入-Debian" class="headerlink" title="刷入 Debian"></a>刷入 Debian</h2><p>拔掉随身 WiFi 并重新插入 USB 接口，解压 Debian 刷机包。打开命令提示符，执行 <code>adb reboot bootloader</code> 进入 fastboot 模式。运行刷机包中的 <code>flash.bat</code>刷入系统，等待刷机完成。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576ce9854dd3.png"><img src="/2024/05/07/wifi-debian/6576ce9854dd3.png" alt="image-20231210235717253"></a></p><p>输出 <code>all done!</code> 则表明刷机完成。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576cea228405.png"><img src="/2024/05/07/wifi-debian/6576cea228405.png" alt="image-20231210235939348"></a></p><h2 id="安装-RNDIS-网络驱动"><a href="#安装-RNDIS-网络驱动" class="headerlink" title="安装 RNDIS 网络驱动"></a>安装 RNDIS 网络驱动</h2><p>重新插入随身 WiFI，打开任务管理器，在其他设备中会出现一个未知设备或以 RNDIS 开头的设备。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576ceae713b7.png"><img src="/2024/05/07/wifi-debian/6576ceae713b7.png" alt="image-20231211002244435"></a></p><p>右键，<strong>更新驱动程序</strong>–&gt;<strong>浏览我的电脑以查找驱动程序</strong>–&gt;<strong>让我从计算机上的可用驱动程序列表中选取</strong>–&gt;<strong>显示所有设备</strong>，等待列表加载完成。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576ced636acb.png"><img src="/2024/05/07/wifi-debian/6576ced636acb.png" alt="image-20231211002348468"></a></p><p>左侧选择 <strong>Microsoft</strong>，右侧选择 **基于远程 NDIS 的 Internet 共享设备，在弹出窗口中选择是，并确定。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576cee2bd3a7.png"><img src="/2024/05/07/wifi-debian/6576cee2bd3a7.png" alt="image-20231211002724457"></a></p><p>至此，RNDIS 驱动安装成功。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576cf3d95a0f.png"><img src="/2024/05/07/wifi-debian/6576cf3d95a0f.png" alt="image-20231211002850196"></a></p><h2 id="连接随身-WiFi-终端"><a href="#连接随身-WiFi-终端" class="headerlink" title="连接随身 WiFi 终端"></a>连接随身 WiFi 终端</h2><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576cf55d48de.png"><img src="/2024/05/07/wifi-debian/6576cf55d48de.png" alt="image-20231211004205761"></a></p><p>驱动安装成功后，电脑上会多出一个名叫 <code>4G_UFI_123456</code> 的 NDIS 设备，同时会出现一个同名的热点，密码为 <strong>12345678</strong>。</p><p>Debian 默认用户名为 user，密码为 1，root 密码也为 1。<strong>请务必及时修改密码（命令：passwd）。</strong></p><p>此时可以通过 adb 或 ssh 连接到 Debian 终端。</p><h3 id="通过-adb-连接"><a href="#通过-adb-连接" class="headerlink" title="通过 adb 连接"></a>通过 adb 连接</h3><p>将随身 WiFi 插入电脑 USB 接口，使用以下命令查看已连接 adb 设备：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br><span class="line">C:\Users\Thinkpad&gt;adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">0123456789      device</span><br></pre></td></tr></table></figure><p>有新设备出现时，使用以下指令进入 bash：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br></pre></td></tr></table></figure><p>通过 adb 连接时，使用 <code>nmtui</code>、<code>htop</code> 等需要显示图形的命令，可能会出现如下错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@openstick:/# nmtui</span><br><span class="line">TERM environment variable needs set.</span><br></pre></td></tr></table></figure><p>设置 <code>TERM</code> 环境变量即可解决。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export TERM=linux</span><br></pre></td></tr></table></figure><h3 id="通过-ssh-连接"><a href="#通过-ssh-连接" class="headerlink" title="通过 ssh 连接"></a>通过 ssh 连接</h3><p>将随身 WiFi 插入电脑 USB 接口或连接上随身 WiFi 的热点，使用以下指令进行连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@192.168.68.1</span><br></pre></td></tr></table></figure><p>如果连不上说明系统还在启动，请稍后再试。</p><h2 id="随身-WiFi-联网"><a href="#随身-WiFi-联网" class="headerlink" title="随身 WiFi 联网"></a>随身 WiFi 联网</h2><p>此时随身 WiFi 并没有联网，必须要关闭热点才能连接 WiFi。下面介绍详细步骤。</p><p>首先打开命令提示符，执行 <code>adb shell</code> 进入 Debian 终端。然后设置 TERM 环境变量：<code>export TERM=linux</code>。</p><p>执行 <code>nmtui</code>，选择“编辑连接”。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576cf5cb34d0.png"><img src="/2024/05/07/wifi-debian/6576cf5cb34d0.png" alt="image-20231211005030766"></a></p><p>左侧使用方向键选择 <code>bridge</code>，右侧选择“编辑”。并回车。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576cf6e3537f.png"><img src="/2024/05/07/wifi-debian/6576cf6e3537f.png" alt="image-20231211005119460"></a></p><p>删除其中的 <code>wifi</code>，并选择确定。。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576cf8484bd9.png"><img src="/2024/05/07/wifi-debian/6576cf8484bd9.png" alt="image-20231211005229505"></a></p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576cf944056e.png"><img src="/2024/05/07/wifi-debian/6576cf944056e.png" alt="image-20231211005307459"></a></p><p>返回，选择启用连接，则可连接 WiFi。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576cf9b13fd4.png"><img src="/2024/05/07/wifi-debian/6576cf9b13fd4.png" alt="img"></a></p><h2 id="优化系统"><a href="#优化系统" class="headerlink" title="优化系统"></a>优化系统</h2><p>删除无效软件包仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /etc/apt/sources.list.d/*</span><br></pre></td></tr></table></figure><p>删除多余软件包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt autopurge -y adoptopenjdk-8-hotspot</span><br></pre></td></tr></table></figure><p>更换软件源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt; /etc/apt/sources.list</span><br><span class="line">deb http://mirrors.ustc.edu.cn/debian/ bullseye main contrib non-free</span><br><span class="line"># deb-src http://mirrors.ustc.edu.cn/debian/ bullseye main contrib non-free</span><br><span class="line"></span><br><span class="line">deb http://mirrors.ustc.edu.cn/debian/ bullseye-updates main contrib non-free</span><br><span class="line"># deb-src http://mirrors.ustc.edu.cn/debian/ bullseye-updates main contrib non-free</span><br><span class="line"></span><br><span class="line">#deb http://mirrors.ustc.edu.cn/debian/ bullseye-backports main contrib non-free</span><br><span class="line"># deb-src http://mirrors.ustc.edu.cn/debian/ bullseye-backports main contrib non-free</span><br><span class="line"></span><br><span class="line">deb http://mirrors.ustc.edu.cn/debian-security/ bullseye-security main contrib non-free</span><br><span class="line"># deb-src http://mirrors.ustc.edu.cn/debian-security/ bullseye-security main contrib non-free</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>更新软件包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update &amp;&amp; apt upgrade -y</span><br></pre></td></tr></table></figure><p>安装常用软件包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install -y nano curl</span><br></pre></td></tr></table></figure><p>删除软件包缓存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt clean</span><br></pre></td></tr></table></figure><h2 id="关闭-LED-灯（可选）"><a href="#关闭-LED-灯（可选）" class="headerlink" title="关闭 LED 灯（可选）"></a>关闭 LED 灯（可选）</h2><p>随身 WiFi 开机后，LED 灯会不停地闪烁，如果不喜欢的话，执行以下命令即可关闭。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo none &gt; /sys/class/leds/blue:wifi/trigger</span><br><span class="line">echo none &gt; /sys/class/leds/red:os/trigger</span><br></pre></td></tr></table></figure><p>执行后会立即生效。为避免重启后失效，建议设置开机自动执行。</p><p>编辑 <code>/etc/rc.local</code> 文件，并将以上两行命令添加到 <code>exit 0</code> 之前，并保存。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576cfab93361.png"><img src="/2024/05/07/wifi-debian/6576cfab93361.png" alt="image-20231211155540049"></a></p><p>关于更多 LED 灯控制的高级用法，建议参考 <a href="https://blog.csdn.net/weixin_41099712/article/details/130836998">随身WIFI折腾日记(一)—霓虹灯</a> 这篇文章。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>感谢 HandsomeHacker 大佬的 <a href="https://github.com/OpenStick/OpenStick">OpenStick</a> 开源项目和苏苏小亮亮大佬的 <a href="https://www.kancloud.cn/a813630449/ufi_car/2795165">刷机包</a>，能在随身 WiFi 上用上 Linux 系统离不开他们的努力。</p>]]></content>
      
      
      <categories>
          
          <category> 实用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随身wifi刷debian </tag>
            
            <tag> linux </tag>
            
            <tag> 刷机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>anzhiyu主题配置</title>
      <link href="/2024/05/04/anzhiyu%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/05/04/anzhiyu%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h1><h2 id="搭建Hexo博客"><a href="#搭建Hexo博客" class="headerlink" title="搭建Hexo博客"></a>搭建Hexo博客</h2><p>如果你还没有Hexo博客，请按照Hexo官方文档进行安装、建站。</p><h2 id="作者的话"><a href="#作者的话" class="headerlink" title="作者的话"></a>作者的话</h2><p>请注意<code>_config.anzhiyu.yml</code>中的配置优先级大于<code>_config.yml</code>，所以更新主题后需要比对主题文件夹中的<code>theme/anzhiyu/_config.yml</code> 文件内容，一般在<a href="https://github.com/anzhiyu-c/hexo-theme-anzhiyu/releases">release</a> 的说明里会特别提示或给出配置文件版本对比diff，同步修改原配置文件即可。</p><blockquote><p>[Tip]</p><p>致题的新用户：</p><ul><li>本指南经过数个版本打磨，绝大部分的功能都有详细说明，请仔细阅读，节约自己和他人的时间；</li><li>本指南中提到的：”<strong>站点配置</strong>“ 指的 <code>Hexo</code> 博客目录下的 <code>_config.yml</code>，”<strong>主题配置</strong>“ 指的是 <code>theme/anzhiyu/_config.yml</code> 或者 <code>_config.anzhiyu.yml</code> ，注意区分；</li><li>本指南中提到的 <code>source</code> 目录都指的是博客目录下的 <code>source</code> 文件夹，不推荐修改主题内 <code>source</code> 目录；</li><li>每次无论 <code>hexo g</code> 或 <code>hexo s</code>，都最好先使用 <code>hexo clean</code> 清除本地缓存；</li><li>页面结果以本地 <code>hexo s</code> 为准，部署后的异常大部分是线上缓存原因，在确认没有报错的情况下，等待若干时间后即可正常；</li><li>由于主题的不同版本会存在配置差异，本指南以最新版本为准。</li></ul></blockquote><p>本指南不包括所有的配置说明，几乎每个配置在主题配置中都有注释，可配合指南共同参考使用。</p><p>另外本指南仅包含主题范围内的使用说明，如果是 Hexo 的使用或者 Hexo 插件的使用，请查阅各自的文档。</p><p>若存在其他主题相关的疑问请在 <a href="https://github.com/anzhiyu-c/hexo-theme-anzhiyu/issues/new">issues</a> 留言。</p><h2 id="主题安装-1"><a href="#主题安装-1" class="headerlink" title="主题安装"></a>主题安装</h2><blockquote><p>[温馨提示]</p><p>Anzhiyu主题拥有<strong>Main</strong>(稳定版)和<strong>Dev</strong>(测试版)两种版本, 我们推荐您安装使用<strong>Github</strong>(稳定版)以获得最佳的主题体验</p></blockquote><h3 id="方式一-Github-推荐"><a href="#方式一-Github-推荐" class="headerlink" title="方式一(Github 推荐):"></a><strong>方式一(Github 推荐):</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b main https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git themes/anzhiyu</span><br></pre></td></tr></table></figure><p>如遇安装不上可以使用以下url代理安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b main https://ghproxy.com/https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git themes/anzhiyu</span><br></pre></td></tr></table></figure><h3 id="方式二-Release-推荐"><a href="#方式二-Release-推荐" class="headerlink" title="方式二(Release 推荐):"></a><strong>方式二(Release 推荐):</strong></h3><p>下载 <a href="https://github.com/anzhiyu-c/hexo-theme-anzhiyu/releases">最新 release 版本</a> 解压到 <code>themes</code> 目录，并将解压出的文件夹重命名为 <code>anzhiyu</code>。</p><h3 id="方式三-npm安装"><a href="#方式三-npm安装" class="headerlink" title="方式三(npm安装):"></a><strong>方式三(npm安装):</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-theme-anzhiyu</span><br></pre></td></tr></table></figure><p>此方法只支持 Hexo 5.0.0 以上版本 通过 npm 安装并不会在 themes 里生成主题文件夹，而是在 node_modules 里生成</p><h3 id="测试版Dev"><a href="#测试版Dev" class="headerlink" title="测试版Dev"></a><strong>测试版Dev</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b dev https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git themes/anzhiyu</span><br></pre></td></tr></table></figure><p>测试版可能存在 bug，追求稳定的请安装稳定版</p><h2 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h2><p>打开 <strong>Hexo</strong> 根目录下的 <code>config.yml</code>, 找到以下配置项，把主题改为<code>anzhiyu</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">anzhiyu</span></span><br></pre></td></tr></table></figure><h2 id="安装-pug-和-stylus-渲染插件"><a href="#安装-pug-和-stylus-渲染插件" class="headerlink" title="安装 pug 和 stylus 渲染插件"></a>安装 pug 和 stylus 渲染插件<a href="https://docs.anheyu.com/initall.html#%E5%AE%89%E8%A3%85-pug-%E5%92%8C-stylus-%E6%B8%B2%E6%9F%93%E6%8F%92%E4%BB%B6"></a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>无法安装可以使用cnpm进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save --registry=http://registry.npmmirror.com</span><br></pre></td></tr></table></figure><h2 id="覆盖配置"><a href="#覆盖配置" class="headerlink" title="覆盖配置"></a>覆盖配置<a href="https://docs.anheyu.com/initall.html#%E8%A6%86%E7%9B%96%E9%85%8D%E7%BD%AE"></a></h2><p>覆盖配置可以使<code>主题配置</code>放置在 anzhiyu 目录之外，避免在更新主题时丢失自定义的配置。</p><p>通过 Npm 安装主题的用户可忽略，其他用户建议学习使用。</p><ul><li>macos&#x2F;linux 在博客根目录运行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -rf ./themes/anzhiyu/_config.yml ./_config.anzhiyu.yml</span><br></pre></td></tr></table></figure><ul><li>windows 复制<code>/themes/anzhiyu/_config.yml</code>此文件到 hexo 根目录，并重命名为<code>_config.anzhiyu.yml</code></li></ul><p>以后如果修改任何主题配置，都只需修改 _config.anzhiyu.yml 的配置即可。</p><p>注意：</p><ul><li>只要存在于 <code>_config.anzhiyu.yml</code> 的配置都是高优先级，修改原 <code>_config.yml</code> 是无效的。</li><li>每次更新主题可能存在配置变更，请注意更新说明，可能需要手动对 <code>_config.anzhiyu.yml</code> 同步修改。</li><li>想查看覆盖配置有没有生效，可以通过 <code>hexo g --debug</code> 查看命令行输出。</li><li>如果想将某些配置覆盖为空，注意不要把主键删掉，不然是无法覆盖的</li></ul><h2 id="本地启动-hexo"><a href="#本地启动-hexo" class="headerlink" title="本地启动 hexo"></a>本地启动 hexo<a href="https://docs.anheyu.com/initall.html#%E6%9C%AC%E5%9C%B0%E5%90%AF%E5%8A%A8-hexo"></a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>此时就能在看到效果了。</p><h2 id="升级方法"><a href="#升级方法" class="headerlink" title="升级方法"></a>升级方法<a href="https://docs.anheyu.com/initall.html#%E5%8D%87%E7%BA%A7%E6%96%B9%E6%B3%95"></a></h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a><strong>方式一</strong></h3><blockquote><p>适用于通过 Github 或 Release 压缩包主题，且没有自行修改任何代码的情况。</p></blockquote><ol><li>先将原文件夹重命名为别的名称，例如 <code>anzhiyu-bkp</code>，用于升级失败进行回退；</li><li>选择自己的安装方式升级</li></ol><p><code>Github</code>：重新重新执行安装命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b main https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git themes/anzhiyu</span><br></pre></td></tr></table></figure><p><code>Release</code>：按照安装步骤，下载 <a href="https://github.com/anzhiyu-c/hexo-theme-anzhiyu/releases">release</a> 并解压重命名为 <code>anzhiyu</code>；</p><ol><li>比对升级后的配置文件<code>_config.yml</code>，如果某些配置发生了变化（改名或弃用），<a href="https://github.com/anzhiyu-c/hexo-theme-anzhiyu/releases">release</a> 的说明里会特别提示或给出配置文件版本对比diff，同步修改原配置文件即可。</li></ol><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a><strong>方式二</strong></h3><blockquote><p>适用于通过 Npm 安装主题。</p></blockquote><p>在博客目录下执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update --save hexo-theme-anzhiyu</span><br></pre></td></tr></table></figure><p>比对升级后的配置文件<code>_config.yml</code>,如果某些配置发生了变化（改名或弃用），<a href="https://github.com/anzhiyu-c/hexo-theme-anzhiyu/releases">release</a> 的说明里会特别提示或给出配置文件版本对比diff，同步修改原配置文件即可。</p><h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a><strong>方式三</strong></h3><p>全量更新：删除<strong>theme&#x2F;anzhiyu</strong>文件夹，然后重新执行安装命令即可。</p><p>比对升级后的配置文件<code>_config.yml</code>,如果某些配置发生了变化（改名或弃用），<a href="https://github.com/anzhiyu-c/hexo-theme-anzhiyu/releases">release</a> 的说明里会特别提示或给出配置文件版本对比diff，同步修改原配置文件即可。</p>]]></content>
      
      
      <categories>
          
          <category> 实用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>侧边栏添加个性时钟</title>
      <link href="/2024/04/19/%E4%BE%A7%E8%BE%B9%E6%A0%8F%E6%B7%BB%E5%8A%A0%E4%B8%AA%E6%80%A7%E6%97%B6%E9%92%9F/"/>
      <url>/2024/04/19/%E4%BE%A7%E8%BE%B9%E6%A0%8F%E6%B7%BB%E5%8A%A0%E4%B8%AA%E6%80%A7%E6%97%B6%E9%92%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><p>创建 <table><tr><td bgcolor="PowderBlue">[themes]&#x2F;source&#x2F;js&#x2F;custom&#x2F;digit-clock.js</td></tr></table> 文件，在其中添加如下内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个包含10个元素的数组，每个元素的值为索引  </span></span><br><span class="line"><span class="keyword">var</span> _time10 = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(<span class="number">10</span>)).<span class="title function_">map</span>(<span class="function">(<span class="params">n, i</span>) =&gt;</span> i);</span><br><span class="line"><span class="comment">// 创建一个包含前6个元素的数组，作为时间的小时和分钟  </span></span><br><span class="line"><span class="keyword">var</span> _time6 = _time10.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"><span class="comment">// 创建一个包含前3个元素的数组，作为时间的秒钟  </span></span><br><span class="line"><span class="keyword">var</span> _time3 = _time10.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// 创建一个包含3个子数组的二维数组，用于表示时钟的结构  </span></span><br><span class="line"><span class="keyword">var</span> _Structure = [</span><br><span class="line">    [_time3, _time10],</span><br><span class="line">    [_time6, _time10],</span><br><span class="line">    [_time6, _time10]</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 创建一个div元素作为时钟的容器，并设置id为&#x27;clock&#x27;  </span></span><br><span class="line"><span class="keyword">var</span> clock = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">clock.<span class="property">id</span> = <span class="string">&#x27;clock&#x27;</span>;</span><br><span class="line"><span class="comment">// 将时钟容器添加到元素中元素中  </span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;digit-clock&quot;</span>).<span class="title function_">appendChild</span>(clock);</span><br><span class="line"><span class="comment">// 创建一个数组用于存储每个数字组的div元素  </span></span><br><span class="line"><span class="keyword">var</span> digitGroups = [];</span><br><span class="line"><span class="comment">// 请求动画帧并调用update函数  </span></span><br><span class="line"><span class="title function_">requestAnimationFrame</span>(update);</span><br><span class="line"><span class="comment">// 遍历_Structure数组  </span></span><br><span class="line">_Structure.<span class="title function_">forEach</span>(<span class="function"><span class="params">digits</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个div元素作为数字组的容器，并添加类名&#x27;digit-group&#x27;  </span></span><br><span class="line">    <span class="keyword">var</span> digitGroup = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    digitGroup.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;digit-group&#x27;</span>);</span><br><span class="line">    <span class="comment">// 将数字组的容器添加到时钟容器中，并将其添加到digitGroups数组中  </span></span><br><span class="line">    clock.<span class="title function_">appendChild</span>(digitGroup);</span><br><span class="line">    digitGroups.<span class="title function_">push</span>(digitGroup);</span><br><span class="line">    <span class="comment">// 遍历digits数组  </span></span><br><span class="line">    digits.<span class="title function_">forEach</span>(<span class="function"><span class="params">digitList</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个div元素作为数字的容器，并添加类名&#x27;digit&#x27;  </span></span><br><span class="line">        <span class="keyword">var</span> digit = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        digit.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;digit&#x27;</span>);</span><br><span class="line">        <span class="comment">// 遍历digitList数组  </span></span><br><span class="line">        digitList.<span class="title function_">forEach</span>(<span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 创建一个div元素作为数字的子元素，并添加类名&#x27;digit-number&#x27;，设置文本内容为n  </span></span><br><span class="line">            <span class="keyword">var</span> ele = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">            ele.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;digit-number&#x27;</span>);</span><br><span class="line">            ele.<span class="property">innerText</span> = n;</span><br><span class="line">            <span class="comment">// 将数字的子元素添加到数字的容器中  </span></span><br><span class="line">            digit.<span class="title function_">appendChild</span>(ele);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 将数字的容器添加到数字组的容器中  </span></span><br><span class="line">        digitGroup.<span class="title function_">appendChild</span>(digit);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 定义update函数  </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 请求动画帧并调用update函数  </span></span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(update);</span><br><span class="line">    <span class="comment">// 创建一个Date对象表示当前时间  </span></span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="comment">// 获取当前时间的小时、分钟和秒钟，并将它们转换为两位数的字符串数组  </span></span><br><span class="line">    <span class="keyword">var</span> time = [date.<span class="title function_">getHours</span>(), date.<span class="title function_">getMinutes</span>(), date.<span class="title function_">getSeconds</span>()].</span><br><span class="line">        <span class="title function_">map</span>(<span class="function"><span class="params">n</span> =&gt;</span> <span class="string">`0<span class="subst">$&#123;n&#125;</span>`</span>.<span class="title function_">slice</span>(-<span class="number">2</span>).<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">e</span> =&gt;</span> +e)).</span><br><span class="line">        <span class="title function_">reduce</span>(<span class="function">(<span class="params">p, n</span>) =&gt;</span> p.<span class="title function_">concat</span>(n), []);</span><br><span class="line">    <span class="comment">// 遍历time数组  </span></span><br><span class="line">    time.<span class="title function_">forEach</span>(<span class="function">(<span class="params">n, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> digit = digitGroups[<span class="title class_">Math</span>.<span class="title function_">floor</span>(i * <span class="number">0.5</span>)].<span class="property">children</span>[i % <span class="number">2</span>].<span class="property">children</span>;</span><br><span class="line">        <span class="comment">// 遍历数字组的子元素  </span></span><br><span class="line">        <span class="title class_">Array</span>.<span class="title function_">from</span>(digit).<span class="title function_">forEach</span>(<span class="function">(<span class="params">e, i2</span>) =&gt;</span> e.<span class="property">classList</span>[i2 === n ? <span class="string">&#x27;add&#x27;</span> : <span class="string">&#x27;remove&#x27;</span>](<span class="string">&#x27;bright&#x27;</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 <table><tr><td bgcolor="PowderBlue">[themes]&#x2F;source&#x2F;css&#x2F;custom&#x2F;digit-clock.css</td></tr></table> 文件，在其中添加如下内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#digit-clock</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#clock</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.digit-group</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.digit-group</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:last-child</span>)<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: inherit;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;:&quot;</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.digit</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">33px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.digit</span> <span class="selector-class">.digit-number</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: inherit;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transition</span>: font-size <span class="number">200ms</span>,transform <span class="number">350ms</span>,color <span class="number">150ms</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.digit</span> <span class="selector-class">.digit-number</span><span class="selector-class">.bright</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: inherit;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 <table><tr><td bgcolor="PowderBlue">[blog]&#x2F;source&#x2F;_data&#x2F;widget.yml</td></tr></table>文件，在其中添加如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">top:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">card-clock</span></span><br><span class="line">    <span class="attr">id_name:</span></span><br><span class="line">    <span class="attr">name:</span></span><br><span class="line">    <span class="attr">icon:</span> </span><br><span class="line">    <span class="attr">order:</span></span><br><span class="line">    <span class="attr">html:</span> <span class="string">&lt;div</span> <span class="string">id=&quot;digit-clock&quot;&gt;&lt;/div&gt;&lt;script</span> <span class="string">defer</span> <span class="string">async</span> <span class="string">data-pjax</span> <span class="string">src=&quot;/js/custom/digit-clock.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p><font size="5">假如你想除了文章页面都显示时钟就将 <font color="Blue">top</font> 改成 <font color="Blue">Bottom</font><br>可以通过修改 <font color="Blue">opder</font> 的值来为你的侧边栏进行排序<br>假如你使用 <font color="Blue">gulp</font> 压缩资源，可能会导致无法运行，修改 <font color="Blue">gulpfile.js</font>(我这里是使用的空梦的<font color="Blue"><a href="https://kmar.top/posts/7d9fb37e/">gulp</a></font> ):</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 压缩js</span></span><br><span class="line"><span class="comment">// 参数 doc：https://github.com/terser-js/terser#minify-options</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-js&#x27;</span>, <span class="function">() =&gt;</span></span><br><span class="line">    gulp.<span class="title function_">src</span>([<span class="string">&#x27;./public/**/*.js&#x27;</span>,<span class="string">&#x27;!./public/**/digit-clock.js&#x27;</span>])</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">terser</span>(&#123;</span><br><span class="line">            <span class="attr">compress</span>: &#123;</span><br><span class="line">                <span class="comment">/** <span class="doctag">@see</span> https://blog.csdn.net/weixin_39842528/article/details/81390588 */</span></span><br><span class="line">                <span class="attr">sequences</span>: <span class="number">50</span>,</span><br><span class="line">                <span class="attr">unsafe</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">unsafe_math</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">pure_getters</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">ecma</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><font size="5">我们可以在 <font color="Blue">gulp.src</font> 中添加一个 <font color="Blue">!.&#x2F;public&#x2F;path&#x2F;to&#x2F;your&#x2F;file.js</font> 来排除某个文件。这意味着 <font color="Blue">Gulp</font> 将会处理<font color="Blue">.&#x2F;public&#x2F;**&#x2F;*.js</font> 匹配的所有文件，除了<font color="Blue">.&#x2F;public&#x2F;path&#x2F;to&#x2F;your&#x2F;file.js</font>。</font></p>]]></content>
      
      
      <categories>
          
          <category> 实用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2024/04/19/test/"/>
      <url>/2024/04/19/test/</url>
      
        <content type="html"><![CDATA[<p>##这是我的第一篇文章</p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Blog</title>
      <link href="/2024/04/18/hello-world/"/>
      <url>/2024/04/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
