<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>修改背景</title>
      <link href="/2024/05/25/%E5%AE%89%E7%9F%A5%E9%B1%BC%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9%E8%83%8C%E6%99%AF/"/>
      <url>/2024/05/25/%E5%AE%89%E7%9F%A5%E9%B1%BC%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9%E8%83%8C%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我一开始还觉得奇怪，安知鱼既然是基于 butterfly 修改而来的，为什么 butterfly 有背景的选择，但是安知鱼却选择将其删除掉了</p><p>后面等我修改完一切我就知道为什么这样做了 ———— 设计理念冲突</p><p>安知鱼这个主题给我的整体感官就是果味十足，高对比度设计，颜色亮度大</p><p>所以当我强行更改完后的结果就是，真的不堪入目。。。很不和谐的感觉</p><p>我这里建议想要换背景就安心去用 butterfly，不要想着给安知鱼主题强行换背景，不然到时候换完背景别怪我没提醒你。🤣</p><p>当然我也尝试更改过配色问题，但是模块太多了，很多地方也没有沿用主题配色，需要单独修改，到最后我都不想改了。。。越改越像 butterfly 了</p><p>是由于这里我就简单记录一下我修改的地方，帮助大家 DIY 主题</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="设置背景"><a href="#设置背景" class="headerlink" title="设置背景"></a>设置背景</h2><p>首先我们找到主题文件夹下\source\css_global\index.styl 文件</p><p>定位到 200 行左右的#web_bg ，也就是 web_bg 的样式</p><p>然后我们删除样式内</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">top</span>: -<span class="number">50%</span>;</span><br><span class="line"><span class="attribute">left</span>: -<span class="number">50%</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">1deg</span>);</span><br></pre></td></tr></table></figure><p>并将width 和height 从原来的 200% 修改为 100%</p><p>然后通过查找功能找到–anzhiyu-background 变量，大概在 101 行左右，这个变量的值就是主题的背景了</p><p>可以将值定义为url(你的背景图片地址) ，这样就完成了背景图片的更换</p><p>最后我们找到–global-bg 变量，大概在 91 行左右，将这个变量定义为透明颜色，即rgba(255,255,255,0)</p><p>这样背景替换就完成了</p><h2 id="降低主页卡片透明度"><a href="#降低主页卡片透明度" class="headerlink" title="降低主页卡片透明度"></a>降低主页卡片透明度</h2><p>首先我们找到主题文件夹下\source\css\var.styl 文件</p><p>定位到$card-bg 变量，大概在 48 行左右</p><p>将 $white 换为rgba(255,255,255,0.9) ，自定义透明度调整最后的 0.9 参数就行了</p><p>然后找到主题文件夹下\source\css_global\index.styl 文件</p><p>定位到–anzhiyu-card-bg 变量，大概在 116 行，将其设置为和$card-bg 相同的值（修改过后的）即可</p><p>这样降低主页卡片透明度就完成了</p><h2 id="恢复加载动画背景透明度"><a href="#恢复加载动画背景透明度" class="headerlink" title="恢复加载动画背景透明度"></a>恢复加载动画背景透明度</h2><p>tips：如果你没有进行上面降低透明度操作或者没有开启安知鱼的全屏加载动画那就可以跳过本节了</p><p>当完成上面操作后我们需要调整加载动画的透明度，因为加载动画的背景也是调用的–anzhiyu-card-bg 变量，而我们进行上面操作后就会导致加载动画背景透明度也跟着一起降低，无法起到遮挡的 mask 作用</p><p>找到主题文件夹下\source\css_global\loading.styl 文件</p><p>定位到大概第 7 行左右，将background 修改为rgba(255,255,255,1) 即可（用白色 rbg 也行）</p><h2 id="给顶部导航栏增加底色"><a href="#给顶部导航栏增加底色" class="headerlink" title="给顶部导航栏增加底色"></a>给顶部导航栏增加底色</h2><p>修改背景后透明的导航栏会有时候受背景影响而不容易看清，增加一点底色则会好很多</p><p>找到主题文件夹下\source\css_layout\head.styl 文件</p><p>定位到&amp;.not-top-img 下的 background，将原来的 0 修改为你想要的 rbga，我这里为了看起来正常一点便设置为rgba(255,255,255,0.5)</p><p>根据自己的喜好修改即可</p><h2 id="给背景增加高斯模糊"><a href="#给背景增加高斯模糊" class="headerlink" title="给背景增加高斯模糊"></a>给背景增加高斯模糊</h2><p>不一定都要增加，根据自己的背景图片自行决定即可</p><p>找到主题文件夹下\source\css_global\index.styl 文件</p><p>定位到#web_bg ，和上面修改主题背景一样的地方</p><p>在其中添加一行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">4px</span>);</span><br></pre></td></tr></table></figure><p>至于模糊程度就看自己喜好了</p><h2 id="解决-essay-页面背景图片过大问题"><a href="#解决-essay-页面背景图片过大问题" class="headerlink" title="解决 essay 页面背景图片过大问题"></a>解决 essay 页面背景图片过大问题</h2><p>essay 页面或者称闲言碎语、即刻</p><p>找到主题文件夹下\source\css_extra\essay_page\essay_page.css 文件</p><p>定位到 10-12 行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span><span class="selector-attr">[data-type=<span class="string">&quot;essay&quot;</span>]</span> <span class="selector-id">#web_bg</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--anzhiyu-background);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除即可</p><p>说白了就是多了一个背景图片，删掉一个即可</p><h1 id="额外"><a href="#额外" class="headerlink" title="额外"></a>额外</h1><h2 id="增加底部版权文字和一言的距离"><a href="#增加底部版权文字和一言的距离" class="headerlink" title="增加底部版权文字和一言的距离"></a>增加底部版权文字和一言的距离</h2><p>我不知道这算 bug 还是设计问题，底部的 ©2023 By xxx 和一言贴在一起了，就很难看</p><p>找到主题文件夹下\layout\include\footer.pug 文件</p><p>定位到 73 行和 76 行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.copyright!= `&amp;copy;$&#123;theme.footer.owner.since&#125; - $&#123;nowYear&#125; By `</span><br><span class="line"></span><br><span class="line">.copyright!= `&amp;copy;$&#123;nowYear&#125; By $&#123;config.author&#125; `</span><br></pre></td></tr></table></figure><p>多打几个空格即可</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>rk3399-sw799刷ArmbianOS</title>
      <link href="/2024/05/11/rk3399-sw799%E5%88%B7ArmbianOS/"/>
      <url>/2024/05/11/rk3399-sw799%E5%88%B7ArmbianOS/</url>
      
        <content type="html"><![CDATA[<h1 id="SW799主板"><a href="#SW799主板" class="headerlink" title="SW799主板"></a>SW799主板</h1><p>镜像下载：<a href="https://gitee.com/link?target=http://files.kos.org.cn/rockchip/sw799/">http://files.kos.org.cn/rockchip/sw799/</a></p><p>ophub Armbian下载：<a href="https://gitee.com/link?target=https://github.com/ophub/amlogic-s9xxx-armbian/releases">https://github.com/ophub/amlogic-s9xxx-armbian/releases</a></p><p>ophub openwrt下载：<a href="https://gitee.com/link?target=https://github.com/ophub/amlogic-s9xxx-openwrt/releases">https://github.com/ophub/amlogic-s9xxx-openwrt/releases</a></p><p>rk3399工具下载：<a href="https://gitee.com/xiayang0521/rk3399/releases/">rk3399 发行版 - Gitee.com</a></p><h2 id="规格参数"><a href="#规格参数" class="headerlink" title="规格参数"></a>规格参数</h2><ol><li>SW799核心板（笔者手头拿到两种）</li></ol><table><thead><tr><th>部件名称</th><th>芯片型号</th><th>备注说明</th></tr></thead><tbody><tr><td>CPU</td><td>RK3399</td><td>Dual-core A72+Quad-core A53, 64 bits, 2GHz;Mali-T864 GPU</td></tr><tr><td>RAM</td><td></td><td>4 GB DDR3L SDRAM</td></tr><tr><td>Flash</td><td></td><td>8G&#x2F;16G</td></tr><tr><td>WIFI+BT</td><td>AP6236&#x2F;AP6181</td><td>WIFI WITH BLUETOOTH</td></tr><tr><td>金手指</td><td></td><td>用于接底板</td></tr></tbody></table><ol><li>食堂机底板（目前见到有四种sw799的底板，下面以一种食堂机为例，刷机方法区别不大）</li></ol><table><thead><tr><th>部件名称</th><th>芯片型号</th><th>备注说明</th></tr></thead><tbody><tr><td>Ethernet</td><td></td><td>RJ45 Gigabit Ethernet</td></tr><tr><td>4G module</td><td>YUGA CLM920</td><td>4G LTE wireless module</td></tr><tr><td>USB 2.0</td><td></td><td>USB 2.0 * 2</td></tr><tr><td>HDMI</td><td></td><td>无</td></tr><tr><td>power</td><td>12V DC</td><td>PORT size： 5.5 * 2.1</td></tr><tr><td>mini USB</td><td></td><td>USB mini * 1</td></tr><tr><td>TF port</td><td></td><td>TF-card port * 1</td></tr><tr><td>sim port</td><td></td><td>sim-card port * 1</td></tr><tr><td>USB 3.0</td><td></td><td>未焊接，需要补充电容和接口</td></tr><tr><td>另有mipi 触屏 扬声器 键盘 摄像头等接口 不再一一列出。</td><td></td><td></td></tr></tbody></table><p><img src="/2024/05/11/rk3399-sw799%E5%88%B7ArmbianOS/Users/13258/Documents/blog/source/_posts/rk3399-sw799%E5%88%B7ArmbianOS/sw799fore.png" alt="输入图片说明"> <img src="/2024/05/11/rk3399-sw799%E5%88%B7ArmbianOS/Users/13258/Documents/blog/source/_posts/rk3399-sw799%E5%88%B7ArmbianOS/sw799back.png" alt="输入图片说明"> 图中是补焊了USB3.0的。</p><h2 id="Windows线刷教程"><a href="#Windows线刷教程" class="headerlink" title="Windows线刷教程"></a>Windows线刷教程</h2><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h3><p>DriverAssitant_v5.1.1,AndroidTool,rk3399_loader_v1.24.126.bin</p><p>Linux固件 or 对应的安卓固件：</p><p>〇号机 xy0_update.img — 双14寸触摸屏收银机（reset键在耳机孔里，无TF卡口，有sim口，该机借用HDMI接口给副屏供电和视频显示，切勿当成真的HDMI去接常用的hdmi显示器，否则必然烧掉显示器）</p><p><img src="/2024/05/11/rk3399-sw799%E5%88%B7ArmbianOS/Users/13258/Documents/blog/source/_posts/rk3399-sw799%E5%88%B7ArmbianOS/0.png" alt="输入图片说明"></p><p>一号机 xy1_update.img — 金属边框结实双触屏（5寸+8寸）食堂机（reset键在usbmini接口旁边的小孔里，有TF卡口，有sim口）</p><p><img src="/2024/05/11/rk3399-sw799%E5%88%B7ArmbianOS/Users/13258/Documents/blog/source/_posts/rk3399-sw799%E5%88%B7ArmbianOS/1.png" alt="输入图片说明"></p><p>二号机 xy2_update.img — 塑料边框好拆双触屏（5寸+8寸）食堂机（reset键在usbmini接口旁边的小孔里，无TF卡口，有sim口）</p><p><img src="/2024/05/11/rk3399-sw799%E5%88%B7ArmbianOS/Users/13258/Documents/blog/source/_posts/rk3399-sw799%E5%88%B7ArmbianOS/2.png" alt="输入图片说明"></p><p>三号机 xy3_update.img — 金属外壳三防7寸刷脸支付机 (无reset键，需要拆机短接如下图，无TF卡口，有sim口，该机借用HDMI接口（切勿当成HDMI）实现电源，网线，usb等功能，目前单机仅找到电源的正负极，其他接线不明确；整机带支架的现已接好均可用)</p><p><img src="/2024/05/11/rk3399-sw799%E5%88%B7ArmbianOS/Users/13258/Documents/blog/source/_posts/rk3399-sw799%E5%88%B7ArmbianOS/3.png" alt="输入图片说明"></p><p><img src="/2024/05/11/rk3399-sw799%E5%88%B7ArmbianOS/Users/13258/Documents/blog/source/_posts/rk3399-sw799%E5%88%B7ArmbianOS/No.3.png" alt="三号机 电源正负极和刷机端接点"></p><p>安装DriverAssitant_v5.1.1,打开AndroidTool</p><h3 id="2-插老式安卓数据线到usb-mini，另一端接电脑usb"><a href="#2-插老式安卓数据线到usb-mini，另一端接电脑usb" class="headerlink" title="2. 插老式安卓数据线到usb mini，另一端接电脑usb"></a>2. 插老式安卓数据线到usb mini，另一端接电脑usb</h3><h3 id="3-进入maskrom模式"><a href="#3-进入maskrom模式" class="headerlink" title="3. 进入maskrom模式"></a>3. 进入maskrom模式</h3><h4 id="a-EMMC如果是安卓系统，按住reset键（0-2号机均有reset键）"><a href="#a-EMMC如果是安卓系统，按住reset键（0-2号机均有reset键）" class="headerlink" title="a EMMC如果是安卓系统，按住reset键（0-2号机均有reset键）"></a>a EMMC如果是安卓系统，按住reset键（0-2号机均有reset键）</h4><p>插电开机，打开瑞芯微开发工具，会发现一个adb设备，点击切换，</p><p><img src="/2024/05/11/rk3399-sw799%E5%88%B7ArmbianOS/Users/13258/Documents/blog/source/_posts/rk3399-sw799%E5%88%B7ArmbianOS/%E5%88%87%E6%8D%A2_androidtool.png" alt="输入图片说明"></p><p>等待变成发现一个loader设备，</p><p>点击高级功能找到 进入maskrom 按钮，点击，然后等待发现一个maskrom设备；</p><p><img src="/2024/05/11/rk3399-sw799%E5%88%B7ArmbianOS/Users/13258/Documents/blog/source/_posts/rk3399-sw799%E5%88%B7ArmbianOS/%E9%AB%98%E7%BA%A7%E5%8A%9F%E8%83%BD_androidtool.png" alt="输入图片说明"></p><h4 id="b-清空Bootloader"><a href="#b-清空Bootloader" class="headerlink" title="b 清空Bootloader"></a>b 清空Bootloader</h4><p>比如启动了linux系统（外置内置均可），进入系统后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if=/dev/zero of=/dev/mmcblk2 bs=1M count=300</span><br></pre></td></tr></table></figure><p>关机（如果有tf卡，关机后，拔掉tf卡），重新开机后可以自动进入maskrom模式</p><p>如果是root之后的安卓系统，可以安装termux或者终端模拟器，打开后依次执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">su </span><br><span class="line"></span><br><span class="line">dd if=/dev/zero of=/dev/block/mmcblk0 </span><br><span class="line">等待几秒钟后关机即可，重新开机后可以自动进入maskrom模式</span><br></pre></td></tr></table></figure><h4 id="c-实在没办法，可以采用以下两种之一"><a href="#c-实在没办法，可以采用以下两种之一" class="headerlink" title="c 实在没办法，可以采用以下两种之一"></a>c 实在没办法，可以采用以下两种之一</h4><p>(1) 拆机短接maskrom短接点</p><p><img src="/2024/05/11/rk3399-sw799%E5%88%B7ArmbianOS/Users/13258/Documents/blog/source/_posts/rk3399-sw799%E5%88%B7ArmbianOS/sw799duanjie.png" alt="输入图片说明"></p><p>短接箭头所示位置，插电开机，在刷机软件中观察进入maskrom模式，即可松开短接点；</p><p>(2) 进行串口调试</p><p>接TTL(debug标签的那个)，连接串口并打开串口调试软件，开机后迅速在调试窗口按任意键，打断 u-boot 启动，执行如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot bootloader</span><br></pre></td></tr></table></figure><p>重启后会自动进入刷机模式。</p><h3 id="5-发现一个maskrom设备后，"><a href="#5-发现一个maskrom设备后，" class="headerlink" title="5.发现一个maskrom设备后，"></a>5.发现一个maskrom设备后，</h3><h4 id="a-刷linux"><a href="#a-刷linux" class="headerlink" title="a 刷linux"></a>a 刷linux</h4><p>如图选择rk3399_loader_v1.24.126.bin 作为 Loader, img结尾的armbian镜像作为 System(注意地址为0x00000000)</p><p><img src="/2024/05/11/rk3399-sw799%E5%88%B7ArmbianOS/Users/13258/Documents/blog/source/_posts/rk3399-sw799%E5%88%B7ArmbianOS/loader_system_android_tool.png" alt="注意地址system为0x00000000"> 点击下载镜像标签，点击执行</p><p><img src="/2024/05/11/rk3399-sw799%E5%88%B7ArmbianOS/Users/13258/Documents/blog/source/_posts/rk3399-sw799%E5%88%B7ArmbianOS/burning.png" alt="输入图片说明"></p><h4 id="b-刷android-update-img"><a href="#b-刷android-update-img" class="headerlink" title="b 刷android update.img"></a>b 刷android update.img</h4><p>如图 1 点击升级固件， 2 点击固件, 选择android update.img固件，先点击清空flash,等待清空完成，然后 3 点击升级</p><p><img src="/2024/05/11/rk3399-sw799%E5%88%B7ArmbianOS/Users/13258/Documents/blog/source/_posts/rk3399-sw799%E5%88%B7ArmbianOS/android%20update.png" alt="输入图片说明"></p><h2 id="卡刷教程（适用于带TF卡口的1、2号机）"><a href="#卡刷教程（适用于带TF卡口的1、2号机）" class="headerlink" title="卡刷教程（适用于带TF卡口的1、2号机）"></a>卡刷教程（适用于带TF卡口的1、2号机）</h2><p>可能有些镜像只能线刷不能卡刷，新手请使用我教程里的所用的镜像。</p><h3 id="1-将"><a href="#1-将" class="headerlink" title="1. 将"></a>1. 将</h3><p><a href="https://gitee.com/link?target=http://files.kos.org.cn/rockchip/sw799/Armbian_21.05.1_rk3399_bozz_focal_current_5.10.35-%E5%B0%8F%E5%AA%B3%E5%A6%87.img.7z">http://files.kos.org.cn/rockchip/sw799/Armbian_21.05.1_rk3399_bozz_focal_current_5.10.35-%E5%B0%8F%E5%AA%B3%E5%A6%87.img.7z</a></p><p>解压出Armbian_21.05.1_rk3399_bozz_focal_current_5.10.35.img,烧录到tf卡，</p><h4 id="Windows下TF烧写"><a href="#Windows下TF烧写" class="headerlink" title="Windows下TF烧写"></a>Windows下TF烧写</h4><blockquote><p>使用rufus烧写工具 <a href="https://gitee.com/link?target=https://rufus.ie/zh/">https://rufus.ie/zh/</a></p></blockquote><p>直接烧录img&#x2F;img.xz&#x2F;img.gz格式的镜像文件或者镜像压缩文件</p><p><img src="/2024/05/11/rk3399-sw799%E5%88%B7ArmbianOS/Users/13258/Documents/blog/source/_posts/rk3399-sw799%E5%88%B7ArmbianOS/rufus%20tf.png" alt="输入图片说明"></p><p>如图 依次选择tf卡设备和镜像文件，点击开始，等待烧录完成即可。</p><p>插到机子TF卡口，开机，即可启动tf外置系统，插网线，看路由器后台，查看新出现的ip。</p><p>ssh登录 Armbian初始账号root 密码1234 （属于官方默认设置，以后刷任何机子的armbian先尝试这个）</p><h3 id="2-需要备份EMMC里的系统"><a href="#2-需要备份EMMC里的系统" class="headerlink" title="2. 需要备份EMMC里的系统"></a>2. 需要备份EMMC里的系统</h3><p>原厂Android_mmcblk2备份</p><p>要使用 dd 和 gzip 备份，可以执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if=/dev/mmcblk2 | gzip &gt; Android_mmcblk2.img.gz</span><br></pre></td></tr></table></figure><p>在还原时，可以执行下列命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip -dc Android_mmcblk2.img.gz | dd of=/dev/mmcblk2</span><br></pre></td></tr></table></figure><p>如需把Armbian装进emmc，ssh登陆后，将Armbian_21.05.1_rk3399_bozz_focal_current_5.10.35.img上传到&#x2F;root&#x2F;,执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if=Armbian_21.05.1_rk3399_bozz_focal_current_5.10.35.img of=/dev/mmcblk2 bs=1M</span><br></pre></td></tr></table></figure><p>或者执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">armbian-install # 选择 Boot from emmc - System on eMMC，安装完成后，选择 install/update bootloader on sd/emmc</span><br></pre></td></tr></table></figure><h3 id="3-完成后，关机拔掉tf卡，重新启动即可，请耐心等待1分钟，如果超过1分钟不启动，再考虑是哪里出了问题。"><a href="#3-完成后，关机拔掉tf卡，重新启动即可，请耐心等待1分钟，如果超过1分钟不启动，再考虑是哪里出了问题。" class="headerlink" title="3. 完成后，关机拔掉tf卡，重新启动即可，请耐心等待1分钟，如果超过1分钟不启动，再考虑是哪里出了问题。"></a>3. 完成后，关机拔掉tf卡，重新启动即可，请耐心等待1分钟，如果超过1分钟不启动，再考虑是哪里出了问题。</h3><h3 id="Linux线刷教程"><a href="#Linux线刷教程" class="headerlink" title="Linux线刷教程"></a>Linux线刷教程</h3><ol><li><p>进入烧写模式</p><p>同上进入 MaskRom 模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 查看连接的设备</span><br><span class="line">./rkbin/tools/upgrade_tool ld</span><br><span class="line"># 或使用 rkdeveloptool</span><br><span class="line"># 因 ./rkbin/tools/rkdeveloptool 这个不支持 ld 命令故需要重新编译 rkdeveloptool</span><br><span class="line">git clone https://github.com/rockchip-linux/rkdeveloptool.git</span><br><span class="line">sudo apt install -y libudev-dev libusb-dev dh-autoreconf libglib2.0-dev</span><br><span class="line">cd rkdeveloptool &amp;&amp; autoreconf -i &amp;&amp; ./configure &amp;&amp; make</span><br><span class="line">sudo mv rkdeveloptool /usr/local/bin/</span><br><span class="line">rkdeveloptool ld</span><br><span class="line"></span><br><span class="line"># 应会有如下设备信息</span><br><span class="line">DevNo=1 Vid=0x2207,Pid=0x330c,LocationID=301    Loader</span><br><span class="line"># 或</span><br><span class="line">DevNo=1 Vid=0x2207,Pid=0x330c,LocationID=301    MaskRom</span><br><span class="line"></span><br><span class="line"># Loader 模式进入 MaskRom 模式方法</span><br><span class="line">./rkbin/tools/upgrade_tool rd 3</span><br><span class="line"># 或</span><br><span class="line">rkdeveloptool rd 3</span><br></pre></td></tr></table></figure></li><li><p>初始化 DRAM</p><p>需要在 MaskRom 模式下才下载，否则报错 “The device does not support this operation!”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 初始化 DRAM</span><br><span class="line">./rkbin/tools/upgrade_tool db ./rk3399_loader_v1.22.119.bin</span><br><span class="line"># 或</span><br><span class="line">rkdeveloptool db ./rk3399_loader_v1.22.119.bin</span><br><span class="line"></span><br><span class="line"># 下载镜像</span><br><span class="line">./rkbin/tools/upgrade_tool wl 0x0 ./system.img</span><br><span class="line"># 或</span><br><span class="line">rkdeveloptool wl 0x0 ./system.img</span><br></pre></td></tr></table></figure></li></ol><h4 id="Linux下TF烧写"><a href="#Linux下TF烧写" class="headerlink" title="Linux下TF烧写"></a>Linux下TF烧写</h4><blockquote><p>也可以使用图形化烧写工具 balena-etcher-electron</p><p><a href="https://gitee.com/link?target=https://github.com/balena-io/etcher/releases">https://github.com/balena-io/etcher/releases</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># sdX 为 sdcard 对应的块设备文件</span><br><span class="line">sudo dd if=system.img of=/dev/sdX bs=4M oflag=sync status=progress</span><br></pre></td></tr></table></figure><h3 id="串口调试"><a href="#串口调试" class="headerlink" title="串口调试"></a>串口调试</h3><h4 id="串口选择"><a href="#串口选择" class="headerlink" title="串口选择"></a>串口选择</h4><p>测试了市面上常见的几款 CH340G、PL2303HX 方案的串口，均存在只能读不能写问题，这将无法从串口打断 u-boot 启动和进行 shell 操作，建议使用 CP2104 方案的串口代替。</p><h4 id="通信软件"><a href="#通信软件" class="headerlink" title="通信软件"></a>通信软件</h4><blockquote><p>也可以使用 minicom 、putty、SecureCRT 等工具。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 解决串口权限问题</span><br><span class="line">sudo usermod -a -G dialout $USER</span><br><span class="line"># 重新登录后生效</span><br><span class="line">reboot</span><br><span class="line"></span><br><span class="line"># 安装串口通信软件</span><br><span class="line">sudo apt install -y python3-serial</span><br><span class="line"></span><br><span class="line"># 打开串口</span><br><span class="line">miniterm /dev/ttyUSB0 1500000</span><br><span class="line"></span><br><span class="line"># 退出 miniterm 快捷键为 Ctrl + ]</span><br></pre></td></tr></table></figure><h2 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h2><h2 id="安装及升级-Armbian-的相关说明"><a href="#安装及升级-Armbian-的相关说明" class="headerlink" title="安装及升级 Armbian 的相关说明"></a>安装及升级 Armbian 的相关说明</h2><p>选择和你的盒子型号对应的 Armbian 系统，不同设备的使用方法查看对应的说明。</p><h3 id="安装-Armbian-到-EMMC"><a href="#安装-Armbian-到-EMMC" class="headerlink" title="安装 Armbian 到 EMMC"></a>安装 Armbian 到 EMMC</h3><ol><li><code>Rockchip</code> 平台的安装方法请查看说明文档中的 <a href="https://github.com/ophub/amlogic-s9xxx-armbian/blob/main/documents/README.cn.md#8-%E5%AE%89%E8%A3%85-armbian-%E5%88%B0-emmc">第 8 章节</a>。</li><li><code>Amlogic</code> 和 <code>Allwinner</code> 平台，使用 <a href="https://rufus.ie/">Rufus</a> 或者 <a href="https://www.balena.io/etcher/">balenaEtcher</a> 等工具将系统写入 USB 里，然后把写好系统的 USB 插入盒子。登录 Armbian 系统 (默认用户: root, 默认密码: 1234) → 输入命令：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">armbian-install</span><br></pre></td></tr></table></figure><table><thead><tr><th>可选参数</th><th>默认值</th><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-m</td><td>no</td><td>yes&#x2F;no</td><td>使用主线 u-boot</td></tr><tr><td>-a</td><td>yes</td><td>yes&#x2F;no</td><td>使用 <a href="https://github.com/7Ji/ampart">ampart</a> 分区表调整工具</td></tr><tr><td>-l</td><td>no</td><td>yes&#x2F;no</td><td>显示全部设备列表</td></tr></tbody></table><p>举例: <code>armbian-install -m yes -a no</code></p><h3 id="更新-Armbian-内核"><a href="#更新-Armbian-内核" class="headerlink" title="更新 Armbian 内核"></a>更新 Armbian 内核</h3><p>登录 Armbian 系统 → 输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 使用 root 用户运行 (sudo -i)</span><br><span class="line"># 如果不指定参数，将更新为最新版本。</span><br><span class="line">armbian-update</span><br></pre></td></tr></table></figure><table><thead><tr><th>可选参数</th><th>默认值</th><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-r</td><td>ophub&#x2F;kernel</td><td><code>&lt;owner&gt;/&lt;repo&gt;</code></td><td>设置从 github.com 下载内核的仓库</td></tr><tr><td>-u</td><td>自动化</td><td>stable&#x2F;flippy&#x2F;dev&#x2F;beta&#x2F;rk3588&#x2F;rk35xx&#x2F;h6</td><td>设置使用的内核的 <a href="https://github.com/ophub/kernel/releases">tags 后缀</a></td></tr><tr><td>-k</td><td>最新版</td><td>内核版本</td><td>设置<a href="https://github.com/ophub/kernel/releases/tag/kernel_stable">内核版本</a></td></tr><tr><td>-b</td><td>yes</td><td>yes&#x2F;no</td><td>更新内核时自动备份当前系统使用的内核</td></tr><tr><td>-m</td><td>no</td><td>yes&#x2F;no</td><td>使用主线 u-boot</td></tr><tr><td>-s</td><td>无</td><td>无&#x2F;磁盘名称</td><td>[SOS] 恢复 eMMC&#x2F;NVMe&#x2F;sdX 等磁盘中的系统内核</td></tr><tr><td>-h</td><td>无</td><td>无</td><td>查看使用帮助</td></tr></tbody></table><p>举例: <code>armbian-update -k 5.15.50 -u dev</code></p><p>通过 <code>-k</code> 参数指定内核版本号时，可以准确指定具体版本号，例如：<code>armbian-update -k 5.15.50</code>，也可以模糊指定到内核系列，例如：<code>armbian-update -k 5.15</code>，当模糊指定时将自动使用指定系列的最新版本。</p><p>更新内核时会自动备份当前系统使用的内核，存储路径在 <code>/ddbr/backup</code> 目录里，保留最近使用过的 3 个版本的内核，如果新安装的内核不稳定，可以随时恢复回备份的内核。如果更新内核失败导致系统无法启动，可以通过 <code>armbian-update -s</code> 来恢复系统内核。更多说明详见 <a href="https://github.com/ophub/amlogic-s9xxx-armbian/blob/main/documents/README.cn.md#10-%E6%9B%B4%E6%96%B0-armbian-%E5%86%85%E6%A0%B8">帮助文档</a></p><h3 id="更换-Armbian-源"><a href="#更换-Armbian-源" class="headerlink" title="更换 Armbian 源"></a>更换 Armbian 源</h3><p>登录 Armbian 系统 → 输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">armbian-apt</span><br></pre></td></tr></table></figure><p>根据你所在的国家或地区选择合适的软件源，可以提高软件的下载速度。更多说明详见 <a href="https://github.com/ophub/amlogic-s9xxx-armbian/blob/main/documents/README.cn.md#11-%E5%AE%89%E8%A3%85%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6">帮助文档</a></p><h3 id="安装常用软件"><a href="#安装常用软件" class="headerlink" title="安装常用软件"></a>安装常用软件</h3><p>登录 Armbian 系统 → 输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">armbian-software</span><br></pre></td></tr></table></figure><p>使用 <code>armbian-software -u</code> 命令可以更新本地的软件中心列表。根据用户在 <a href="https://github.com/ophub/amlogic-s9xxx-armbian/issues">Issue</a> 中的需求反馈，逐步整合常用<a href="https://github.com/ophub/amlogic-s9xxx-armbian/blob/main/build-armbian/armbian-files/common-files/usr/share/ophub/armbian-software/software-list.conf">软件</a>，实现一键安装&#x2F;更新&#x2F;卸载等快捷操作。包括 <code>docker 镜像</code>、<code>桌面软件</code>、<code>应用服务</code> 等。详见更多<a href="https://github.com/ophub/amlogic-s9xxx-armbian/blob/main/documents/armbian_software.md">说明</a>。</p><h3 id="修改-Armbian-配置"><a href="#修改-Armbian-配置" class="headerlink" title="修改 Armbian 配置"></a>修改 Armbian 配置</h3><p>登录 Armbian 系统 → 输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">armbian-config</span><br></pre></td></tr></table></figure><h3 id="为-Armbian-创建-swap"><a href="#为-Armbian-创建-swap" class="headerlink" title="为 Armbian 创建 swap"></a>为 Armbian 创建 swap</h3><p>如果你在使用 <code>docker</code> 等内存占用较大的应用时，觉得当前盒子的内存不够使用，可以创建 <code>swap</code> 虚拟内存分区，将磁盘空间的一定容量虚拟成内存来使用。下面命令输入参数的单位是 <code>GB</code>，默认为 <code>1</code>。</p><p>登录 Armbian 系统 → 输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">armbian-swap 1</span><br></pre></td></tr></table></figure><h3 id="控制-LED-显示"><a href="#控制-LED-显示" class="headerlink" title="控制 LED 显示"></a>控制 LED 显示</h3><p>登录 Armbian 系统 → 输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">armbian-openvfd</span><br></pre></td></tr></table></figure><p>根据 <a href="https://github.com/ophub/amlogic-s9xxx-armbian/blob/main/documents/led_screen_display_control.md">LED 屏显示控制说明</a> 进行调试。</p><h3 id="备份-还原-EMMC-原系统"><a href="#备份-还原-EMMC-原系统" class="headerlink" title="备份&#x2F;还原 EMMC 原系统"></a>备份&#x2F;还原 EMMC 原系统</h3><p>支持在 <code>TF/SD/USB</code> 中对盒子的 <code>EMMC</code> 分区进行备份&#x2F;恢复。建议您在全新的盒子里安装 Armbian 系统前，先对当前盒子自带的安卓 TV 系统进行备份，以便日后在恢复电视系统等情况下使用。</p><p>请从 <code>TF/SD/USB</code> 启动 Armbian 系统 → 输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">armbian-ddbr</span><br></pre></td></tr></table></figure><p>根据提示输入 <code>b</code> 进行系统备份，输入 <code>r</code> 进行系统恢复。</p><p>Important</p><p>除此之外也可以通过线刷的方法，将安卓系统刷入 eMMC 中，安卓系统的下载镜像可在 <a href="https://github.com/ophub/kernel/releases/tag/tools">Tools</a> 中查找。</p><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><h4 id="有线"><a href="#有线" class="headerlink" title="有线"></a>有线</h4><p>ps：笔记本如果有网口可以用网线进行桥接，以太网属性ipv4地址设置为板子地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 使用 netplan 配置以太网络</span><br><span class="line">sudo nano /etc/netplan/01-netcfg.yaml</span><br><span class="line"></span><br><span class="line"># 配置为动态获取 IP</span><br><span class="line">network:</span><br><span class="line">  version: 2</span><br><span class="line">  renderer: networkd</span><br><span class="line">  ethernets:</span><br><span class="line">    eth0:</span><br><span class="line">      dhcp4: yes</span><br><span class="line"></span><br><span class="line"># 或静态 IP</span><br><span class="line">network:</span><br><span class="line">  version: 2</span><br><span class="line">  renderer: networkd</span><br><span class="line">  ethernets:</span><br><span class="line">    eth0:</span><br><span class="line">     dhcp4: no</span><br><span class="line">     addresses: [10.0.0.10/24]</span><br><span class="line">     gateway4: 10.0.0.1</span><br><span class="line">     nameservers:</span><br><span class="line">       addresses: [223.5.5.5,223.6.6.6]</span><br><span class="line"></span><br><span class="line"># 应用配置</span><br><span class="line">sudo netplan --debug apply</span><br></pre></td></tr></table></figure><h4 id="无线"><a href="#无线" class="headerlink" title="无线"></a>无线</h4><p>高大全默认没有加载brcm的内核<br>我们通过下面的方式使其开机的时候加载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/modules.d.remove/brcm* /etc/modules.d/</span><br></pre></td></tr></table></figure><p>到这一步就好了</p><p>如果<strong>wifi</strong>模块是ap6236 那么就要继续执行以下操作，如果不是就跳过 以下操作<br>由于sw799 的ap6236这个 wifi模块 高大全没有集成 驱动固件<br>我们需要手动添加<br>第一步去下载 驱动固件<a href="http://files.kos.org.cn/rockchip/sw799/">下载服务器 by nginx (kos.org.cn)</a></p><p><img src="/2024/05/11/rk3399-sw799%E5%88%B7ArmbianOS/Users/13258/Documents/blog/source/_posts/rk3399-sw799%E5%88%B7ArmbianOS/152204mc1qec4y2224rqw2.png" alt="img"></p><p>解压这个压缩包的文件到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/lib/firmware/brcm</span><br></pre></td></tr></table></figure><p>以上目录里面</p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmesg</span><br></pre></td></tr></table></figure><p>查看驱动</p><p><img src="/2024/05/11/rk3399-sw799%E5%88%B7ArmbianOS/Users/13258/Documents/blog/source/_posts/rk3399-sw799%E5%88%B7ArmbianOS/image-20240511144252594.png" alt="image-20240511144252594"></p><p>发现驱动名字不对，修改驱动名字</p><p>reboot重启 就OK</p><p>通过 nmcli 连上 WIFI<br>nmcli 是一个命令行工具，用于控制 NetworkManager；还可以用来显示网络设备状态；创建、编辑、开启&#x2F;关闭和删除网络连接 。Armbian 系统默认自带 nmcli， 这里不介绍安装方法。</p><p>通过 nmcli 直接连上 WIFI 后，系统会记录已保存的 AP。下面是具体的连接方法：</p><p>查看设备状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ nmcli device status</span><br><span class="line">DEVICE  TYPE      STATE         CONNECTION         </span><br><span class="line">enp1s0  ethernet  connected     Wired connection 1 </span><br><span class="line">wlp2s0  wifi      disconnected  --                 </span><br><span class="line">lo      loopback  unmanaged     --  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里 wlp2s0 类型为 wifi，表示我们的无线网卡，状态为 disconnected, 还没有连上 WIFI 热点。</p><p>检查 radio:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ nmcli radio</span><br><span class="line">WIFI-HW  WIFI     WWAN-HW  WWAN    </span><br><span class="line">enabled  enabled  enabled  enabled </span><br></pre></td></tr></table></figure><p>查看附近无线网络信号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ nmcli dev wifi list</span><br><span class="line">SSID                  MODE   CHAN  RATE       SIGNAL  BARS  SECURITY </span><br><span class="line">MYSSID         Infra  11    54 Mbit/s  100     ▂▄▆█  WPA2     </span><br><span class="line">MYSSID         Infra  132   54 Mbit/s  100     ▂▄▆█  WPA2     </span><br><span class="line">SOMEOTHERSSID  Infra  52    54 Mbit/s  49      ▂▄__  WPA2     </span><br><span class="line">MYSSID         Infra  149   54 Mbit/s  45      ▂▄__  WPA2     </span><br><span class="line">MYSSID         Infra  11    54 Mbit/s  42      ▂▄__  WPA2     </span><br><span class="line">SOMEOTHERSSID  Infra  1     54 Mbit/s  27      ▂___  WPA2</span><br></pre></td></tr></table></figure><p>第5列表示信号情况，信号越好的 AP，会越靠前。</p><p>连上 AP 热点：</p><p>如果是无密码的 WIFI， 执行以下连接命令，SSID 就是我们所说的 WIFI 名:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nmcli device wifi connect &lt;SSID|BSSID&gt;</span><br></pre></td></tr></table></figure><p>加密的 AP, 使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nmcli device wifi connect &lt;SSID|BSSID&gt; password &lt;password&gt;</span><br><span class="line">nmcli dev wifi connect &quot;hotspot-name&quot; password &quot;password&quot;</span><br></pre></td></tr></table></figure><p>执行命令没有报错后，再 Ping 下百度是否可达，能 Ping 通就表明已经连上 AP，可以正常上网。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 或使用 nmtui 命令图形化修改</span><br></pre></td></tr></table></figure><p>配置文件位置&#x2F;etc&#x2F;NetworkManager&#x2F;system-connections&#x2F;</p><h4 id="热点"><a href="#热点" class="headerlink" title="热点"></a>热点</h4><p>使用 hostapd + isc-dhcp-server</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y hostapd isc-dhcp-server</span><br><span class="line"></span><br><span class="line"># 配置 hostapd</span><br><span class="line">sudo nano /etc/hostapd/hostapd.conf</span><br><span class="line">interface=wlan0</span><br><span class="line">driver=nl80211</span><br><span class="line">ssid=hostspot-name</span><br><span class="line">macaddr_acl=0</span><br><span class="line">auth_algs=1</span><br><span class="line">#auth_algs=3</span><br><span class="line">ignore_broadcast_ssid=0</span><br><span class="line">hw_mode=g</span><br><span class="line">channel=6</span><br><span class="line">wpa=2</span><br><span class="line">wpa_passphrase=password</span><br><span class="line">wpa_key_mgmt=WPA-PSK</span><br><span class="line">wpa_pairwise=CCMP</span><br><span class="line">#wpa_pairwise=TKIP</span><br><span class="line">#rsn_pairwise=CCMP</span><br><span class="line"></span><br><span class="line"># 修改 hostapd 默认配置文件路径</span><br><span class="line">sudo nano /etc/default/hostapd</span><br><span class="line">DAEMON_CONF=/etc/hostapd/hostapd.conf</span><br><span class="line"></span><br><span class="line"># 重启 hostapd</span><br><span class="line">sudo service hostapd restart</span><br><span class="line">sudo service hostapd status</span><br><span class="line"></span><br><span class="line"># dhcp 配置</span><br><span class="line">sudo nano /etc/dhcp/dhcp.conf</span><br><span class="line">#option domain-name &quot;example.org&quot;;</span><br><span class="line">#option domain-name-servers ns1.example.org, ns2.example.org;</span><br><span class="line">authoritative;</span><br><span class="line">subnet 10.0.0.0 netmask 255.255.255.0 &#123;</span><br><span class="line">    range 10.0.0.10 10.0.0.200;</span><br><span class="line">    option broadcast-address 10.0.0.255;</span><br><span class="line">    option routers 10.0.0.1;</span><br><span class="line">    default-lease-time 600;</span><br><span class="line">    max-lease-time 7200;</span><br><span class="line">    option domain-name &quot;local&quot;;</span><br><span class="line">    option domain-name-servers 223.5.5.5, 8.8.4.4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 设置 dhcp 网口</span><br><span class="line"># 不进行操作会出现错误：Not configured to listen on any interfaces!</span><br><span class="line">sudo nano /etc/default/isc-dhcp-server</span><br><span class="line">INTERFACESv4=&quot;wlan0&quot;</span><br><span class="line">INTERFACESv6=&quot;wlan0&quot;</span><br><span class="line"></span><br><span class="line"># 设置 wlan0 地址</span><br><span class="line"># 不进行操作会出现错误：Not configured to listen on any interfaces!</span><br><span class="line">sudo ip addr add 10.0.0.1/24 dev wlan0</span><br><span class="line"></span><br><span class="line"># 开启转发</span><br><span class="line">sudo sysctl -w net.ipv4.ip_forward=1</span><br><span class="line">sudo iptables -t nat -A POSTROUTING -s 10.0.0.1/24 -o eth0 -j MASQUERADE</span><br><span class="line"></span><br><span class="line"># 启动 dhcp 服务</span><br><span class="line">sudo service isc-dhcp-server restart</span><br><span class="line">sudo service isc-dhcp-server status</span><br></pre></td></tr></table></figure><p>使用 network-manager + dnsmasq</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 此方按创建的 2.4G 热点会出现部分旧设备连接不上</span><br><span class="line">sudo apt install -y dnsmasq</span><br><span class="line">#nmcli dev wifi hotspot ifname wlan0 ssid &quot;hotspot-name&quot; password &quot;password&quot;</span><br><span class="line">nmcli connection add type wifi ifname wlan0 con-name &quot;Hostspot&quot; autoconnect no ssid &quot;hotspot-name&quot;</span><br><span class="line">nmcli connection modify &quot;Hostspot&quot; 802-11-wireless.mode ap 802-11-wireless.band bg ipv4.method shared</span><br><span class="line">nmcli connection modify &quot;Hostspot&quot; wifi-sec.key-mgmt wpa-psk</span><br><span class="line">nmcli connection modify &quot;Hostspot&quot; wifi-sec.psk &quot;password&quot;</span><br><span class="line">nmcli connection up &quot;Hostspot&quot;</span><br><span class="line"></span><br><span class="line"># 或使用 nmtui 命令图形化修改</span><br></pre></td></tr></table></figure><h3 id="测试网速"><a href="#测试网速" class="headerlink" title="测试网速"></a>测试网速</h3><h4 id="Speedtest"><a href="#Speedtest" class="headerlink" title="Speedtest"></a>Speedtest</h4><p><a href="https://link.zhihu.com/?target=https://github.com/sivel/speedtest-cli">Speedtest</a> 是一个旧宠。它用 Python 实现，并打包在 Apt 中，也可用 <code>pip</code> 安装。你可以将它作为命令行工具或在 Python 脚本中使用。</p><p>使用以下命令安装：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install speedtest-cli</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install speedtest-cli</span><br></pre></td></tr></table></figure><p>然后使用命令 <code>speedtest</code> 运行它：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ speedtest</span><br><span class="line">Retrieving speedtest.net configuration...</span><br><span class="line">Testing from CenturyLink (65.128.194.58)...</span><br><span class="line">Retrieving speedtest.net server list...</span><br><span class="line">Selecting best server based on ping...</span><br><span class="line">Hosted by CenturyLink (Cambridge, UK) [20.49 km]: 31.566 ms</span><br><span class="line">Testing download speed................................................................................</span><br><span class="line">Download: 68.62 Mbit/s</span><br><span class="line">Testing upload speed......................................................................................................</span><br><span class="line">Upload: 10.93 Mbit/s</span><br></pre></td></tr></table></figure><p>它给你提供了互联网上传和下载的网速。它快速而且可脚本调用，因此你可以定期运行它，并将输出保存到文件或数据库中，以记录一段时间内的网络速度。</p><h4 id="Fast"><a href="#Fast" class="headerlink" title="Fast"></a>Fast</h4><p><a href="https://link.zhihu.com/?target=https://github.com/sindresorhus/fast-cli">Fast</a> 是 Netflix 提供的服务。它的网址是 <a href="https://link.zhihu.com/?target=https://fast.com/">Fast.com</a>，同时它有一个可通过 <code>npm</code> 安装的命令行工具：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global fast-cli</span><br></pre></td></tr></table></figure><p>网站和命令行程序都提供了相同的基本界面：它是一个尽可能简单的速度测试：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ fast</span><br><span class="line"></span><br><span class="line">     82 Mbps ↓</span><br></pre></td></tr></table></figure><p>该命令返回你的网络下载速度。要获取上传速度，请使用 <code>-u</code> 标志：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ fast -u</span><br><span class="line"></span><br><span class="line">   ⠧ 80 Mbps ↓ / 8.2 Mbps ↑</span><br></pre></td></tr></table></figure><h4 id="iPerf"><a href="#iPerf" class="headerlink" title="iPerf"></a>iPerf</h4><p><a href="https://link.zhihu.com/?target=https://iperf.fr/">iPerf</a> 测试的是局域网速度（而不是像前两个工具一样测试互联网速度）的好方法。Debian、Raspbian 和 Ubuntu 用户可以使用 apt 安装它：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install iperf</span><br></pre></td></tr></table></figure><p>它还可用于 Mac 和 Windows。</p><p>安装完成后，你需要在同一网络上的两台计算机上使用它（两台都必须安装 iPerf）。指定其中一台作为服务器。</p><p>获取服务端计算机的 IP 地址：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr show | grep inet.*brd</span><br></pre></td></tr></table></figure><p>你的本地 IP 地址（假设为 IPv4 本地网络）以 <code>192.168</code> 或 <code>10</code> 开头。记下 IP 地址，以便可以在另一台计算机（指定为客户端的计算机）上使用它。</p><p>在服务端启动 <code>iperf</code>：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iperf -s</span><br></pre></td></tr></table></figure><p>它会等待来自客户端的传入连接。将另一台计算机作为为客户端并运行此命令，将示例中的 IP 替换为服务端计算机的 IP：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iperf -c 192.168.1.2</span><br></pre></td></tr></table></figure><p><img src="/2024/05/11/rk3399-sw799%E5%88%B7ArmbianOS/Users/13258/Documents/blog/source/_posts/rk3399-sw799%E5%88%B7ArmbianOS/v2-49a6a3af858e33dfae718c7b9a32c34b_720w.webp" alt="img"></p><p>只需几秒钟即可完成测试，然后返回传输大小和计算出的带宽。我使用家用服务器作为服务端，在 PC 和笔记本电脑上进行了一些测试。我最近在房屋周围安装了六类线以太网，因此我的有线连接速度达到 1Gbps，但 WiFi 连接速度却低得多。</p><p><img src="/2024/05/11/rk3399-sw799%E5%88%B7ArmbianOS/Users/13258/Documents/blog/source/_posts/rk3399-sw799%E5%88%B7ArmbianOS/v2-f6ba9a67b1b17e3ff358c8f5ae9a4544_720w.webp" alt="img"></p><p>你可能注意到它记录到 16Gbps。那是我使用服务器进行自我测试，因此它只是在测试写入磁盘的速度。该服务器具有仅 16 Gbps 的硬盘驱动器，但是我的台式机有 46Gbps，另外我的（较新的）笔记本超过了 60Gbps，因为它们都有固态硬盘。</p><p><img src="/2024/05/11/rk3399-sw799%E5%88%B7ArmbianOS/Users/13258/Documents/blog/source/_posts/rk3399-sw799%E5%88%B7ArmbianOS/v2-f3ce8a36540507cd65619dd900081d79_720w.png" alt="img"></p><h3 id="镜像源"><a href="#镜像源" class="headerlink" title="镜像源"></a>镜像源</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -a /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">sudo sed -i &quot;s@http://ports.ubuntu.com@http://mirrors.huaweicloud.com@g&quot; /etc/apt/sources.list</span><br></pre></td></tr></table></figure><h3 id="本地化"><a href="#本地化" class="headerlink" title="本地化"></a>本地化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 安装英文与简体中文语言包</span><br><span class="line">sudo apt install -y language-pack-en language-pack-zh-hans</span><br><span class="line"># 设置本地化</span><br><span class="line">sudo dpkg-reconfigure locales</span><br><span class="line"></span><br><span class="line"># 配置时区</span><br><span class="line">sudo apt install -y tzdata</span><br><span class="line">sudo dpkg-reconfigure tzdata</span><br><span class="line"># 同步硬件时间</span><br><span class="line">sudo hwclock -s</span><br></pre></td></tr></table></figure><h3 id="分区扩容"><a href="#分区扩容" class="headerlink" title="分区扩容"></a>分区扩容</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y parted</span><br><span class="line">sudo parted /dev/mmcblk2</span><br><span class="line">unit s</span><br><span class="line">print</span><br><span class="line">resizepart 5 100%</span><br><span class="line">print</span><br><span class="line">Q</span><br><span class="line"></span><br><span class="line">sudo resize2fs /dev/mmcblk2p5</span><br></pre></td></tr></table></figure><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gnupg2 -y</span><br><span class="line"></span><br><span class="line"># 添加 apt 公钥</span><br><span class="line">curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"># 添加软件源</span><br><span class="line">echo &quot;deb [arch=arm64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list</span><br><span class="line"></span><br><span class="line"># 安装 docker</span><br><span class="line">sudo apt update &amp;&amp; sudo apt install docker-ce -y</span><br><span class="line"></span><br><span class="line"># 非 root 用户免 sudo 操作 docker</span><br><span class="line">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>Q：能进 MaskRom 模式，但下载 Loader 初始化 DRAM 总是失败。或 u-boot 无等待时间不能按 RECOVERY 键进入 MaskRom 模式。</p><p>A：插上带有系统的 tf卡，默认会从tf卡，连接串口并打开串口调试软件，开机后迅速在调试窗口按任意键，打断 u-boot 启动，执行如下命令破坏 u-boot，重启后会自动进入 MaskRom 模式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mmc dev 0</span><br><span class="line">mmc erase 0 2000</span><br><span class="line">reset</span><br></pre></td></tr></table></figure><p>或者进入系统后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if=/dev/zero of=/dev/mmcblk2 bs=1M count=300</span><br></pre></td></tr></table></figure><hr><p>Q：使用 apt 安装软件包时出现如下警告：</p><blockquote><p>perl: warning: Setting locale failed. perl: warning: Please check that your locale settings: LANGUAGE &#x3D; (unset), LC_ALL &#x3D; (unset), LANG &#x3D; “zh_CN.UTF-8” are supported and installed on your system. perl: warning: Falling back to the standard locale (“C”).</p></blockquote><p>A：参考 系统配置-本地化 一节安装相应语言包即可解决。</p><hr><p>Q：以太网卡因未被 network-manager 托管不能启用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 网卡未启用</span><br><span class="line">ip addr show eth0</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000</span><br><span class="line">    link/ether 16:a6:4c:50:54:44 brd ff:ff:ff:ff:ff:ff</span><br><span class="line"></span><br><span class="line"># 网卡未被 network-manager</span><br><span class="line">nmcli device</span><br><span class="line">DEVICE  TYPE      STATE      CONNECTION</span><br><span class="line">eth0    ethernet  unmanaged  --</span><br><span class="line">lo      loopback  unmanaged  --</span><br><span class="line"></span><br><span class="line"># 使用该命令启用网卡无效</span><br><span class="line">nmcli dev set eth0 managed yes</span><br></pre></td></tr></table></figure><p>A：原因在于 Ubuntu 更推荐使用 netplan 配置以太网络，默认的 network-manager 配置 &#x2F;usr&#x2F;lib&#x2F;NetworkManager&#x2F;conf.d&#x2F;10-globally-managed-devices.conf 不会托管以太网卡[^7]。若要使用 network-manager 托管所有网络设备操作如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 覆盖默认配置</span><br><span class="line">sudo touch /etc/NetworkManager/conf.d/10-globally-managed-devices.conf</span><br></pre></td></tr></table></figure><hr><p>Q：如何获取当前系统的设备树和内核编译选项？</p><p>A：使用如下命令获取：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 设备树</span><br><span class="line">cat /sys/firmware/fdt &gt; raw.dtb</span><br><span class="line"></span><br><span class="line"># 内核编译选项</span><br><span class="line">zcat /proc/config.gz &gt; kernel.config</span><br></pre></td></tr></table></figure><hr><p>Q：如何连接蓝牙音箱？</p><p>A：使用如下命令连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y bluez bluez-tools pulseaudio pulseaudio-module-bluetooth</span><br><span class="line"></span><br><span class="line"># 查看蓝牙信息</span><br><span class="line">hciconfig</span><br><span class="line"></span><br><span class="line"># 使用 bluetoothctl 命令操作蓝牙</span><br><span class="line"># 上电</span><br><span class="line">power on</span><br><span class="line"># 扫描</span><br><span class="line">scan on</span><br><span class="line"># 配对</span><br><span class="line">pair MAC</span><br><span class="line"># 信任</span><br><span class="line">trust MAC</span><br><span class="line"># 连接</span><br><span class="line">connect MAC</span><br><span class="line"></span><br><span class="line"># 如果连接时出现 Failed to connect: org.bluez.Error.Failed 可以通过重启 pulseaudio 解决</span><br><span class="line">pulseaudio -k</span><br><span class="line">pulseaudio --start</span><br><span class="line"></span><br><span class="line"># 声道测试</span><br><span class="line">speaker-test -c2 -twav</span><br><span class="line"></span><br><span class="line"># 查看 PulseAudio 信息</span><br><span class="line">pactl info</span><br><span class="line"></span><br><span class="line"># 查看音频输出通道</span><br><span class="line">pactl list sinks</span><br><span class="line"></span><br><span class="line"># 设置为默认音频输出通道，通过 TAB 补全后面的名称</span><br><span class="line">pactl set-default-sink bluez_sink.MAC.a2dp_sink</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 实用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sw799 </tag>
            
            <tag> rk3399 </tag>
            
            <tag> armbian </tag>
            
            <tag> linux </tag>
            
            <tag> 刷机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装Halo主题和插件</title>
      <link href="/2024/05/09/%E5%AE%89%E8%A3%85Halo%E4%B8%BB%E9%A2%98%E5%92%8C%E6%8F%92%E4%BB%B6/"/>
      <url>/2024/05/09/%E5%AE%89%E8%A3%85Halo%E4%B8%BB%E9%A2%98%E5%92%8C%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>在查看本篇文档之前，请确保你已经正确安装 Halo，如果不了解什么是 Halo，可以查看官网：<a href="https://halo.run/">https://halo.run/</a><br>下面介绍三种方式安装主题：推荐第三种方式，直接在应用市场插件中安装</p><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><h3 id="在-GitHub-直接下载安装"><a href="#在-GitHub-直接下载安装" class="headerlink" title="在 GitHub 直接下载安装"></a>在 GitHub 直接下载安装</h3><p>如果小伙伴网络不太好，可以参考下面的方式，从 Halo 应用市场下载</p><p><a href="https://github.com/liuzhihang/halo-theme-hao/releases">Releases · liuzhihang&#x2F;halo-theme-hao</a></p><p>Release 页面下载主题后，在 Halo Console 后台上传并启用即可。</p><p><img src="/2024/05/09/%E5%AE%89%E8%A3%85Halo%E4%B8%BB%E9%A2%98%E5%92%8C%E6%8F%92%E4%BB%B6/Users/13258/Documents/blog/source/_posts/%E5%AE%89%E8%A3%85Halo%E4%B8%BB%E9%A2%98%E5%92%8C%E6%8F%92%E4%BB%B6/69d4007b-4c1e-4243-8f8f-0b38f2b9ffd5.png" alt="69d4007b-4c1e-4243-8f8f-0b38f2b9ffd5"></p><h3 id="在应用市场下载安装"><a href="#在应用市场下载安装" class="headerlink" title="在应用市场下载安装"></a>在应用市场下载安装</h3><p><a href="https://halo.run/store/apps?keyword=Hao">应用市场</a></p><p><img src="/2024/05/09/%E5%AE%89%E8%A3%85Halo%E4%B8%BB%E9%A2%98%E5%92%8C%E6%8F%92%E4%BB%B6/Users/13258/Documents/blog/source/_posts/%E5%AE%89%E8%A3%85Halo%E4%B8%BB%E9%A2%98%E5%92%8C%E6%8F%92%E4%BB%B6/9136e8b1-f66d-45df-83f4-e89f27b0002e.png" alt="9136e8b1-f66d-45df-83f4-e89f27b0002e"></p><p><img src="/2024/05/09/%E5%AE%89%E8%A3%85Halo%E4%B8%BB%E9%A2%98%E5%92%8C%E6%8F%92%E4%BB%B6/Users/13258/Documents/blog/source/_posts/%E5%AE%89%E8%A3%85Halo%E4%B8%BB%E9%A2%98%E5%92%8C%E6%8F%92%E4%BB%B6/1c10282e-bc23-42f4-bc74-7b52b3ab094e.png" alt="1c10282e-bc23-42f4-bc74-7b52b3ab094e"></p><h2 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h2><h3 id="在-GitHub-在线安装"><a href="#在-GitHub-在线安装" class="headerlink" title="在 GitHub 在线安装"></a>在 GitHub 在线安装</h3><p>Release 页面右键复制链接 主题.zip，在 Halo Console 后台选择远程下载并启用即可。</p><p><img src="/2024/05/09/%E5%AE%89%E8%A3%85Halo%E4%B8%BB%E9%A2%98%E5%92%8C%E6%8F%92%E4%BB%B6/Users/13258/Documents/blog/source/_posts/%E5%AE%89%E8%A3%85Halo%E4%B8%BB%E9%A2%98%E5%92%8C%E6%8F%92%E4%BB%B6/d9830681-7798-4cfc-9720-2eefcdbec469.png" alt="d9830681-7798-4cfc-9720-2eefcdbec469"></p><p><img src="/2024/05/09/%E5%AE%89%E8%A3%85Halo%E4%B8%BB%E9%A2%98%E5%92%8C%E6%8F%92%E4%BB%B6/Users/13258/Documents/blog/source/_posts/%E5%AE%89%E8%A3%85Halo%E4%B8%BB%E9%A2%98%E5%92%8C%E6%8F%92%E4%BB%B6/e7ad5b2d-6bbe-4436-b3c0-44dcd54142a9.png" alt="e7ad5b2d-6bbe-4436-b3c0-44dcd54142a9"></p><h3 id="在应用市场在线安装"><a href="#在应用市场在线安装" class="headerlink" title="在应用市场在线安装"></a>在应用市场在线安装</h3><p>在安装时填写自己的博客地址</p><p><img src="/2024/05/09/%E5%AE%89%E8%A3%85Halo%E4%B8%BB%E9%A2%98%E5%92%8C%E6%8F%92%E4%BB%B6/Users/13258/Documents/blog/source/_posts/%E5%AE%89%E8%A3%85Halo%E4%B8%BB%E9%A2%98%E5%92%8C%E6%8F%92%E4%BB%B6/c56b03f8-cc92-4b0a-a0d3-263a1382daaf.png" alt="c56b03f8-cc92-4b0a-a0d3-263a1382daaf"></p><h3 id="👍-应用市场插件安装"><a href="#👍-应用市场插件安装" class="headerlink" title="👍 应用市场插件安装"></a>👍 应用市场插件安装</h3><p>应用市场插件安装后续可以直接在后台进行更新，推荐此种方式。</p><p>1首先需要下载应用<a href="https://halo.run/store/apps/app-VYJbF">市场插件</a></p><p>2在自己的博客后台搜索 Hao，此种方便后续更新</p><p><img src="/2024/05/09/%E5%AE%89%E8%A3%85Halo%E4%B8%BB%E9%A2%98%E5%92%8C%E6%8F%92%E4%BB%B6/Users/13258/Documents/blog/source/_posts/%E5%AE%89%E8%A3%85Halo%E4%B8%BB%E9%A2%98%E5%92%8C%E6%8F%92%E4%BB%B6/1909fd6e-4e45-4a2d-b11a-533e9ba1afb5.png" alt="1909fd6e-4e45-4a2d-b11a-533e9ba1afb5"></p><p>从商城安装的前提是需要安装商城插件</p><p><a href="https://halo.run/store/apps/app-VYJbF">应用市场插件</a></p><p><img src="/2024/05/09/%E5%AE%89%E8%A3%85Halo%E4%B8%BB%E9%A2%98%E5%92%8C%E6%8F%92%E4%BB%B6/Users/13258/Documents/blog/source/_posts/%E5%AE%89%E8%A3%85Halo%E4%B8%BB%E9%A2%98%E5%92%8C%E6%8F%92%E4%BB%B6/a24c8ce6-ff20-4f5a-b6f8-3faa9515696e.png" alt="a24c8ce6-ff20-4f5a-b6f8-3faa9515696e"></p><p>若有收获，就点个赞吧</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Halo </tag>
            
            <tag> 1Panel搭建Halo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1Panel搭建Halo</title>
      <link href="/2024/05/08/1Panel%E6%90%AD%E5%BB%BAHalo/"/>
      <url>/2024/05/08/1Panel%E6%90%AD%E5%BB%BAHalo/</url>
      
        <content type="html"><![CDATA[<h2 id="安装1Panel"><a href="#安装1Panel" class="headerlink" title="安装1Panel"></a>安装1Panel</h2><h2 id="环境要求¶"><a href="#环境要求¶" class="headerlink" title="环境要求¶"></a>环境要求<a href="https://1panel.cn/docs/installation/online_installation/#1">¶</a></h2><p><strong>安装前请确保您的系统符合安装条件：</strong></p><ul><li>操作系统：支持主流 Linux 发行版本（基于 Debian &#x2F; RedHat，包括国产操作系统）；</li><li>服务器架构：x86_64、aarch64、armv7l、ppc64le、s390x；</li><li>内存要求：建议可用内存在 1GB 以上；</li><li>浏览器要求：请使用 Chrome、FireFox、IE10+、Edge等现代浏览器；</li><li><strong>可访问互联网</strong>。</li></ul><h2 id="安装部署¶"><a href="#安装部署¶" class="headerlink" title="安装部署¶"></a>安装部署<a href="https://1panel.cn/docs/installation/online_installation/#2">¶</a></h2><p>GitHub release 链接: <a href="https://github.com/1Panel-dev/1Panel/releases">https://github.com/1Panel-dev/1Panel/releases</a></p><p>RedHat &#x2F; CentOS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh &amp;&amp; sh quick_start.sh</span><br></pre></td></tr></table></figure><p>Ubuntu</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh &amp;&amp; sudo bash quick_start.sh</span><br></pre></td></tr></table></figure><p>Debian</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh &amp;&amp; bash quick_start.sh</span><br></pre></td></tr></table></figure><p>openEuler &#x2F; 其他</p><p>第一步：安装 docker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -sSL https://linuxmirrors.cn/docker.sh)</span><br></pre></td></tr></table></figure><p>第二步：安装 1Panel</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh &amp;&amp; sh quick_start.sh</span><br></pre></td></tr></table></figure><p>安装成功后，控制台会打印面板访问信息，可通过浏览器访问 1Panel：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://目标服务器 IP 地址:目标端口/安全入口</span><br></pre></td></tr></table></figure><ul><li><strong>如果使用的是云服务器，请至安全组开放目标端口。</strong></li><li><strong>ssh 登录 1Panel 服务器后，执行 1pctl user-info 命令可获取安全入口（entrance）</strong></li></ul><p>安装成功后，可使用 <a href="https://1panel.cn/docs/installation/cli/">1pctl</a> 命令行工具来维护 1Panel</p><h2 id="1Panel-简介"><a href="#1Panel-简介" class="headerlink" title="1Panel 简介"></a>1Panel 简介<a href="https://docs.halo.run/getting-started/install/1panel#1panel-%E7%AE%80%E4%BB%8B"></a></h2><p><a href="https://1panel.cn/">1Panel</a> 是一个现代化、开源的 Linux 服务器运维管理面板。</p><p><img src="/2024/05/08/1Panel%E6%90%AD%E5%BB%BAHalo/1panel-6ffbe25fad8e4cf600af312928911090.png" alt="1Panel 截图"></p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能<a href="https://docs.halo.run/getting-started/install/1panel#%E5%8A%9F%E8%83%BD"></a></h3><ul><li><strong>快速建站</strong>：深度集成 WordPress 和 Halo，域名绑定、SSL 证书配置等一键搞定。</li><li><strong>高效管理</strong>：通过 Web 端轻松管理 Linux 服务器，包括应用管理、主机监控、文件管理、数据库管理、容器管理等。</li><li><strong>安全可靠</strong>：最小漏洞暴露面，提供防火墙和安全审计等功能。</li><li><strong>一键备份</strong>：支持一键备份和恢复，备份数据云端存储，永不丢失。</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装<a href="https://docs.halo.run/getting-started/install/1panel#%E5%AE%89%E8%A3%85"></a></h3><p>关于 1Panel 的安装部署与基础功能介绍，请参考 <a href="https://1panel.cn/docs/installation/online_installation/">1Panel 官方文档</a>。此处假设你已经完成了 1Panel 的安装部署，并对其功能有了基础了解。</p><h3 id="安装基础软件"><a href="#安装基础软件" class="headerlink" title="安装基础软件"></a>安装基础软件<a href="https://docs.halo.run/getting-started/install/1panel#%E5%AE%89%E8%A3%85%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6"></a></h3><p>在安装 Halo 之前，我们需要先在 1Panel 上安装好所需的软件，包括 OpenResty 和 MySQL。在接下来的文档中，我们会默认你已经安装好了这两个软件，并不再赘述。</p><p><img src="/2024/05/08/1Panel%E6%90%AD%E5%BB%BAHalo/openresty-mysql-20f5f4bce5d3ba3ea5957f756d18e621.png" alt="OpenResty 和 MySQL"></p><h2 id="安装-Halo-应用"><a href="#安装-Halo-应用" class="headerlink" title="安装 Halo 应用"></a>安装 Halo 应用<a href="https://docs.halo.run/getting-started/install/1panel#%E5%AE%89%E8%A3%85-halo-%E5%BA%94%E7%94%A8"></a></h2><p>进入应用商店应用列表，选择其中的 Halo 应用进行安装。</p><p><img src="/2024/05/08/1Panel%E6%90%AD%E5%BB%BAHalo/app-store-halo-5c6a2e8eda3c8b05e9d30b4fc28f71fc.png" alt="选择 Halo 应用"></p><p>在应用详情页选择最新的 Halo 版本进行安装。</p><p><img src="/2024/05/08/1Panel%E6%90%AD%E5%BB%BAHalo/install-halo-84a2df4a36a33a0fcad439720484b489.png" alt="选择 Halo 版本"></p><p>参数说明：</p><ul><li><strong>名称</strong>：要创建的 Halo 应用的名称。</li><li><strong>数据库服务</strong>：Halo 应用使用的数据库应用，支持下拉选择已安装的数据库应用，1Panel 会自动配置 Halo 使用该数据库。</li><li><strong>数据库名</strong>：Halo 应用使用的数据库名称，1Panel 会在选中的数据库中自动创建这个数据库。</li><li><strong>数据库用户</strong>：Halo 应用使用的数据库用户名，1Panel 会在选中的数据库中自动创建这个用户，并添加对应的数据库授权。</li><li><strong>数据库用户密码</strong>：Halo 应用使用的数据库用户密码，1Panel 会在选中的数据库中自动为上一步创建的用户配置该密码。</li><li><strong>超级管理员用户名</strong>：Halo 应用初始化创建的超级管理员用户名。</li><li><strong>超级管理员密码</strong>：Halo 应用初始化创建的超级管理员密码。</li><li><strong>外部访问地址</strong>：Halo 应用的最终访问地址，如果有为 Halo 规划域名，需要配置为域名格式，例如 <code>http://halo.example.com</code>。否则配置为 <code>http://服务器IP:PORT</code>，例如 <code>http://192.168.1.1:8090</code>。</li><li><strong>端口</strong>：Halo 应用的服务端口。</li></ul><p>开始安装后页面自动跳转到已安装应用列表，等待刚刚安装的 Halo 应用变为已启动状态。</p><p><img src="/2024/05/08/1Panel%E6%90%AD%E5%BB%BAHalo/halo-status-fa9f2ddd79fa60ad673d815b376b2a29.png" alt="Halo 运行状态"></p><p>此时便可以通过配置的外部访问地址来访问 Halo 了。</p><p><img src="/2024/05/08/1Panel%E6%90%AD%E5%BB%BAHalo/halo-console-80549c3810f8aea010ffd6b009448315.png" alt="访问 Halo"></p><h2 id="创建网站"><a href="#创建网站" class="headerlink" title="创建网站"></a>创建网站<a href="https://docs.halo.run/getting-started/install/1panel#%E5%88%9B%E5%BB%BA%E7%BD%91%E7%AB%99"></a></h2><p>完成 Halo 应用的安装后，此时并不会自动创建一个网站，我们需要手动创建一个网站，然后将 Halo 应用绑定到这个网站上才能使用域名访问。</p><p>点击 1Panel 菜单的 <strong>网站</strong>，进入网站列表页，点击 <strong>创建网站</strong> 按钮。</p><p><img src="/2024/05/08/1Panel%E6%90%AD%E5%BB%BAHalo/new-site-5f1a81dc1b467ec4866bd3ef165238fd.png" alt="创建网站"></p><ol><li>在已装应用中选择我们刚刚新建的 Halo 应用。</li><li>正确填写主域名，需要注意的是需要提前解析好域名到服务器 IP。</li></ol><p>最后，点击确认按钮，等待网站创建完成。</p><p><img src="/2024/05/08/1Panel%E6%90%AD%E5%BB%BAHalo/site-41b043355588452f47728c3b89e7dc08.png" alt="网站列表"></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Halo </tag>
            
            <tag> 1Panel搭建Halo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo插入图片</title>
      <link href="/2024/05/07/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
      <url>/2024/05/07/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p>平时写博客文章都是 markdown 格式，使用 Typora 编辑器。在搭建了图床后，使用新版本 Typora 和 PicGo 软件可以实现图片自动上传，非常方便写文章时的图片添加与存储。</p><h1 id="配置图床"><a href="#配置图床" class="headerlink" title="配置图床"></a>配置图床</h1><p>本文主要从以下4个部分来介绍：</p><p><strong>1 PicGo 安装与配置</strong></p><p><strong>2 图床搭建</strong></p><p><strong>3 Typora 配置 PicGo</strong></p><p><strong>4 可能遇到的问题</strong></p><p>下面就带大家一步步搭建出一个免费的图床！</p><h2 id="1-PicGo-安装与配置"><a href="#1-PicGo-安装与配置" class="headerlink" title="1 PicGo 安装与配置"></a>1 PicGo 安装与配置</h2><p>PicGo 是一个用于快速上传图片并获取图片URL链接的工具，选择合适的版本并下载，可访问PicGo的官方文档进一步了解其功能和用法。我使用的是 win10系统，下载的是最新的版本。下载可能会很慢，可借助迅雷进行下载。下载后双击进行安装，注意不要安装在C盘。</p><p><img src="/2024/05/07/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/v2-e1e7d47b39f0ee903719d460f26d9750_720w.webp" alt="img"></p><blockquote><p>PicGo 下载地址：<a href="https://link.zhihu.com/?target=https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a><br>使用指南：<a href="https://link.zhihu.com/?target=https://picgo.github.io/PicGo-Doc/zh/guide/">https://picgo.github.io/PicGo-Doc/zh/guide/</a></p></blockquote><p>PicGo 安装后需要进一步配置，本文简要介绍 PicGo 的两种配置，详细的可以参考使用指南。</p><p><strong>自定义快捷键：</strong></p><p>在Windows中，快捷上传的快捷键是 Ctrl+Shift+P，点击 PicoGo 左侧栏的 PicGo 设置和修改快捷键设置，可以按自己喜好修改快捷键。此外，PicGo 有快速截图并上传的功能，在插件设置中搜索 quick-capture，然后进行安装，默认的快捷键是Ctrl+Shift+0，也可以进行修改。</p><p><strong>上传前重命名：</strong></p><p>如果你想在图片上传前能够有机会改动你的图片名，我们可以在PicGo中打开上传前重命名开关，这样之后在上传的时候就会弹出一个小窗口让你重命名文件。如果你不想重命名，点击确定、取消或者直接关闭这个窗口都是可以的。如果你想要重命名就在输入框里输入想要更改的名字，然后点击确定即可。</p><h2 id="2-图床搭建"><a href="#2-图床搭建" class="headerlink" title="2 图床搭建"></a>2 图床搭建</h2><p>PicGo 支持的图床很多，如七牛图床、腾讯云 COS、阿里云 OSS、Github 图床、Gitee 图床等等，本文介绍的是基于 Github 和 Gitee 来搭建免费的图床。</p><h3 id="2-1-搭建-Github-图床"><a href="#2-1-搭建-Github-图床" class="headerlink" title="2.1 搭建 Github 图床"></a><strong>2.1 搭建 Github 图床</strong></h3><p><strong>新建Github仓库并生成Token：</strong></p><ul><li>注册 Github 用户</li><li>在 Github 上新建一个用于存储的仓库，点击 New repository 创建一个新仓库。</li></ul><p><img src="/2024/05/07/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/v2-d630774d543d71a82c50747431b92210_720w.webp" alt="img"></p><ul><li>生成一个 Personal access tokens</li></ul><p>在 Github 中依次点击<strong>Settings-&gt;Developer settings-&gt;Personal access tokens-&gt;Generate new token</strong>，勾选 repo 权限，填写描述，然后点击 Generate token 按钮，生成 token。由于生成的 token 只会在第一次显示，建议保存下来备用，否则后续只能重新生成 token。</p><p><img src="/2024/05/07/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/v2-feb2997ba918768683de4057e7ea26d2_720w.webp" alt="img"></p><p><strong>PicGo 配置 Github 图床：</strong></p><p>打开PicGo，点击图床设置，对Github图床进行设置。</p><p><img src="/2024/05/07/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/v2-5e0290963cc85d2748fe3c35be94d6ba_720w.webp" alt="img"></p><p>配置说明如下：</p><ul><li>设定仓库名：按照照“用户名&#x2F;仓库名”的格式填写，比如我的weylin&#x2F;ImgHosting。</li><li>设定分支名：默认主分支 master 即可。</li><li>设定 Token：将之前生成的 token 复制粘贴到这里。</li><li>指定存储路径：图床仓库目录下的子目录，默认是根目录。</li><li>设定自定义域名：自定义域名的作用是在上传图片后成功后，PicGo 将以“自定义域名+子目录名+图片名”生成访问连接。这里我们的自定义域名为：<a href="https://link.zhihu.com/?target=https://cdn.jsdelivr.net/gh/">https://cdn.jsdelivr.net/gh/</a>用户名&#x2F;仓库名，用的是<a href="https://link.zhihu.com/?target=http://cdn.jsdelivr.net">http://cdn.jsdelivr.net</a>提升图片的加载速度。</li></ul><h3 id="2-2-搭建-Gitee-图床"><a href="#2-2-搭建-Gitee-图床" class="headerlink" title="2.2 搭建 Gitee 图床"></a><strong>2.2 搭建 Gitee 图床</strong></h3><p><strong>新建 Gitee 仓库并生成个人 token：</strong></p><ul><li>注册 Gitee 账号</li><li>在 Gitee 上新建一个仓库，点击右上角+号新建仓库。</li></ul><p><img src="/2024/05/07/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/v2-c4f30b81b6a65fe9e85ddae5b4d34d4a_720w.webp" alt="img"></p><ul><li>生成个人 token</li></ul><p>在个人主页，找到安全设置栏的私人令牌，点击生成新令牌，填写描述信息，提交生成私人令牌。与 Github 生成 token一样，只会显示依次，要注意保存备用。</p><p><img src="/2024/05/07/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/v2-3164878c018c103bec2484128e579d6f_720w.webp" alt="img"></p><p><strong>PicGo 配置 Gitee 图床：</strong></p><p>PicGo 图床配置默认是没有 Gitee 图床的，需要我们安装 Gitee 插件。在PicGo 插件设置搜索 Gitee，两个插件可以选择一个安装。注意：安装插件前本机需要已安装 node.js，插件下载需要使用到 node.js 的npm。</p><blockquote><p>windows环境下安装node.js：<a href="https://link.zhihu.com/?target=https://jingyan.baidu.com/article/48b37f8dd141b41a646488bc.html">https://jingyan.baidu.com/article/48b37f8dd141b41a646488bc.html</a></p></blockquote><p><img src="/2024/05/07/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/v2-9ff85efad717efcc7cd9e646b9ef0a8a_720w.webp" alt="img"></p><p>返回到图床设置，开始设置 Gitee 图床：</p><p><img src="/2024/05/07/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/v2-f5a814ce21352fb83bd0be375b4ca9c9_720w.webp" alt="img"></p><p>配置说明如下：</p><ul><li>url：gitee地址，即<a href="https://link.zhihu.com/?target=https://gitee.com/">https://gitee.com/</a></li><li>owner：gitee用户名。</li><li>repo：图床仓库名。</li><li>path：图床仓库中的子目录，默认是根目录。</li><li>token：之前生成的私人令牌。</li><li>message：信息说明，可以不填。</li></ul><p>在完成上述图床搭建操作后，就可以使用 PicGo 来上传图片到 Github 或 Gitee，并生成图片访问链接了。我平时是使用 Typora 这个 Markdown 编辑器来写博客文章，之前插入图片是使用 PicGo上传到图床，然后将地址粘贴到 Typora 中。目前新版本的Typora已支持 PicGo 服务，可以通过设置Typora实现快速插入图片。</p><h2 id="3-Typora-配置-PicGo"><a href="#3-Typora-配置-PicGo" class="headerlink" title="3 Typora 配置 PicGo"></a>3 Typora 配置 PicGo</h2><p><strong>Typora 图像配置：</strong></p><p>依次打开 Typora 的文件-&gt;偏好设置-&gt;图像，进行配置：</p><p><img src="/2024/05/07/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/v2-cbbe5532884a09aa1e405e58cf5f50e6_720w.webp" alt="img"></p><p>然后，点击验证图片上传选项验证配置是否正确，由于我的 PicGo 中 PicGo-Server 设置中的监听端口默认为 36686，与下图中的 36677 不一致而验证失败，将PicGo中的端口设置为 36677 验证成功。</p><p><img src="/2024/05/07/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/v2-2f2e6ceae67422d66c3e0afe4e8a9ed9_720w.webp" alt="img"></p><p>到这里，我们已经成功将 Typora+PicGo+Github&#x2F;Gitee 配置好了，可以愉快的文章写作啦！将图片复制到 Typora 中，点击上传图片，即可将图片上传到 Gitee 图床仓库中。</p><h2 id="4-可能遇到的问题"><a href="#4-可能遇到的问题" class="headerlink" title="4 可能遇到的问题"></a><strong>4 可能遇到的问题</strong></h2><p>搭建好图床后，在上传图片时，可能会出现异常。</p><p><strong>出现 Failed to fetch：</strong></p><p>确认在 PicGo 中打开了 Server 服务，监听端口与 typora 检验端口保持一致。</p><p><strong>上传图片出现{“success”,false}：</strong></p><p>常常是由于文件名冲突引起的。如果不是，可重启服务和电脑尝试解决。</p><h1 id="插入本地图片"><a href="#插入本地图片" class="headerlink" title="插入本地图片"></a>插入本地图片</h1><p>插入图片的时候走了不少弯路，写篇blog记录一下。</p><h2 id="第一步：安装插件，在hexo根目录打开Git-Bash-执行"><a href="#第一步：安装插件，在hexo根目录打开Git-Bash-执行" class="headerlink" title="第一步：安装插件，在hexo根目录打开Git Bash,执行"></a>第一步：安装插件，在hexo根目录打开Git Bash,执行</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><h2 id="第二步：打开hexo的配置文件-config-yml"><a href="#第二步：打开hexo的配置文件-config-yml" class="headerlink" title="第二步：打开hexo的配置文件_config.yml"></a>第二步：打开hexo的配置文件_config.yml</h2><p>找到 post_asset_folder，把这个选项从false改成true</p><h2 id="第三步：打开"><a href="#第三步：打开" class="headerlink" title="第三步：打开"></a>第三步：打开</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/node_modules/hexo-asset-image/index.js</span><br></pre></td></tr></table></figure><p>将内容更换为下面的代码<br> （在此感谢Ericam_ 大神：<a href="https://links.jianshu.com/go?to=https://blog.csdn.net/xjm850552586">https://blog.csdn.net/xjm850552586</a>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">var cheerio = require(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class="line"><span class="keyword">function</span> getPosition(str, m, i) &#123;</span><br><span class="line">  <span class="built_in">return</span> str.split(m, i).<span class="built_in">join</span>(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var version = String(hexo.version).<span class="built_in">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="keyword">function</span>(data)&#123;</span><br><span class="line">  var config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">        var <span class="built_in">link</span> = data.permalink;</span><br><span class="line">    <span class="keyword">if</span>(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)</span><br><span class="line">       var beginPos = getPosition(<span class="built_in">link</span>, <span class="string">&#x27;/&#x27;</span>, 1) + 1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       var beginPos = getPosition(<span class="built_in">link</span>, <span class="string">&#x27;/&#x27;</span>, 3) + 1;</span><br><span class="line">    // In hexo 3.1.1, the permalink of <span class="string">&quot;about&quot;</span> page is like <span class="string">&quot;.../about/index.html&quot;</span>.</span><br><span class="line">    var endPos = link.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + 1;</span><br><span class="line">    <span class="built_in">link</span> = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    var toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(var i = 0; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      var key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      var $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).each(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(this).attr(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">            // For windows style path, we replace <span class="string">&#x27;\&#x27;</span> to <span class="string">&#x27;/&#x27;</span>.</span><br><span class="line">            var src = $(this).attr(<span class="string">&#x27;src&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(!/http[s]*.*|\/\/.*/.test(src) &amp;&amp;</span><br><span class="line">               !/^\s*\//.test(src)) &#123;</span><br><span class="line">              // For <span class="string">&quot;about&quot;</span> page, the first part of <span class="string">&quot;src&quot;</span> can<span class="string">&#x27;t be removed.</span></span><br><span class="line"><span class="string">              // In addition, to support multi-level local directory.</span></span><br><span class="line"><span class="string">              var linkArray = link.split(&#x27;</span>/<span class="string">&#x27;).filter(function(elem)&#123;</span></span><br><span class="line"><span class="string">                return elem != &#x27;</span><span class="string">&#x27;;</span></span><br><span class="line"><span class="string">              &#125;);</span></span><br><span class="line"><span class="string">              var srcArray = src.split(&#x27;</span>/<span class="string">&#x27;).filter(function(elem)&#123;</span></span><br><span class="line"><span class="string">                return elem != &#x27;</span><span class="string">&#x27; &amp;&amp; elem != &#x27;</span>.<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">              &#125;);</span></span><br><span class="line"><span class="string">              if(srcArray.length &gt; 1)</span></span><br><span class="line"><span class="string">                srcArray.shift();</span></span><br><span class="line"><span class="string">              src = srcArray.join(&#x27;</span>/<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">              $(this).attr(&#x27;</span>src<span class="string">&#x27;, config.root + link + src);</span></span><br><span class="line"><span class="string">              console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;else&#123;</span></span><br><span class="line"><span class="string">            console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span></span><br><span class="line"><span class="string">            console.info&amp;&amp;console.info($(this));</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;);</span></span><br><span class="line"><span class="string">      data[key] = $.html();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure><h2 id="第四步：现在就可以插入图片了"><a href="#第四步：现在就可以插入图片了" class="headerlink" title="第四步：现在就可以插入图片了"></a>第四步：现在就可以插入图片了</h2><p>在hexo new post photo之后<br>就在source&#x2F;_posts生成photo.md文件和photo文件夹，我们把要插入的图片复制到photo文件夹内，<br>在photo.md文件里面按markdown的标准写,（我的文件名是head.jpeg）比如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![这是代替图片的文字，随便写](C:/head.jpeg)</span><br></pre></td></tr></table></figure><p>注意这里文件路径要加上盘符。</p>]]></content>
      
      
      <categories>
          
          <category> 实用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 插入图片 </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wifi-debian</title>
      <link href="/2024/05/07/wifi-debian/"/>
      <url>/2024/05/07/wifi-debian/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近我在网上看到一款骁龙 410 SoC 的随身 WiFi，性价比高，领券后十元以下就能买到。更重要的是，这款 SoC 的随身 WiFi 能刷 Debian 系统。你可以在上面搭建网站甚至 MC 服务器，也可以接上扩展版当 Linux 开发板用，可玩性很高。</p><p>本文记录一下刷机的步骤和注意事项。</p><h2 id="硬件配置"><a href="#硬件配置" class="headerlink" title="硬件配置"></a>硬件配置</h2><p>这款随身 WiFi 配置如下：</p><table><thead><tr><th>SoC</th><th>骁龙410（MSM8916）四核 Cortex-A53，64 位</th></tr></thead><tbody><tr><td>内存</td><td>512MB</td></tr><tr><td>存储</td><td>4GB</td></tr><tr><td>版号</td><td>UFI001C、UFI001B、UFI003、UZ801、SP970</td></tr></tbody></table><p><strong>不是骁龙 410 SoC 的随身 WiFi 无法刷机，请知悉。</strong></p><h2 id="所需文件"><a href="#所需文件" class="headerlink" title="所需文件"></a>所需文件</h2><ul><li><a href="https://www.123pan.com/s/7368Vv-3TyQh.html">高通 9008 驱动</a></li><li><a href="https://googledownloads.cn/android/repository/platform-tools-latest-windows.zip">ADB 工具</a></li><li><a href="https://www.123pan.com/s/7368Vv-hTyQh.html">Miko 备份工具</a></li><li><a href="https://www.123pan.com/s/XwVDVv-WICn3">Debian 刷机包</a></li></ul><p>如果不确定下载哪个，请先查看板子型号再下载刷机包。</p><h2 id="查看板子型号"><a href="#查看板子型号" class="headerlink" title="查看板子型号"></a>查看板子型号</h2><p>用螺丝刀将随身 WiFi 的外壳拆开，查看板子上方的丝印，型号一般以 UFI、UZ 或 SP 开头。如红框中所示，我买到的型号是 UFI003。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576ce22e2579.jpg"><img src="/2024/05/07/wifi-debian/6576ce22e2579.jpg" alt="1702214357490"></a></p><h2 id="安装-9008-驱动"><a href="#安装-9008-驱动" class="headerlink" title="安装 9008 驱动"></a>安装 9008 驱动</h2><p>执行 <code>driver.exe</code>，并点击立即安装。在弹出如下窗口中，点击“安装”。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576ce32c14a5.png"><img src="/2024/05/07/wifi-debian/6576ce32c14a5.png" alt="image-20231204174343852"></a></p><h2 id="安装-ADB-工具"><a href="#安装-ADB-工具" class="headerlink" title="安装 ADB 工具"></a>安装 ADB 工具</h2><p>解压 <code>platform-tools_r34.0.5-windows.zip</code>，并将解压目录添加到环境变量。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576ce3d09e64.png"><img src="/2024/05/07/wifi-debian/6576ce3d09e64.png" alt="image-20231210224939537"></a></p><p>打开命令提示符，执行 <code>adb version</code>。有如下输出，则表明配置正确。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Thinkpad&gt;adb version</span><br><span class="line">Android Debug Bridge version 1.0.41</span><br><span class="line">Version 34.0.5-10900879</span><br><span class="line">Installed as D:\platform-tools\adb.exe</span><br><span class="line">Running on Windows 10.0.19045</span><br></pre></td></tr></table></figure><h2 id="安装-Miko-备份工具"><a href="#安装-Miko-备份工具" class="headerlink" title="安装 Miko 备份工具"></a>安装 Miko 备份工具</h2><p>解压 <code>MiKo_Loder Pro.zip</code>，运行 <code>miko.exe</code> 安装备份工具。安装完成后，桌面上会出现 Miko 备份工具的快捷方式。在图标上右键，打开文件所在位置，将解压得到的 <code>Loader.exe</code> 复制到 Miko 安装目录即可。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576ce44c7690.png"><img src="/2024/05/07/wifi-debian/6576ce44c7690.png" alt="image-20231210215138055"></a></p><h2 id="开启-ADB"><a href="#开启-ADB" class="headerlink" title="开启 ADB"></a>开启 ADB</h2><p>将随身 WiFi 插入电脑 USB 接口。打开设备管理器，如果此时多了一个名叫 <code>Android Composite ADB Interface</code> 的设备，则表明随身 WiFi 已经开启 ADB，无需执行其他操作。</p><p>如果没有出现这个设备，则需要手动开启 ADB。以 <code>UZ801</code> 型号为例，连上随身 WiFi 的热点，并访问 <a href="http://192.168.100.1/usbdebug.html">http://192.168.100.1/usbdebug.html</a> 即可开启 ADB，再次访问即可关闭。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576ce6125f05.png"><img src="/2024/05/07/wifi-debian/6576ce6125f05.png" alt="image-20231210215947101"></a></p><h2 id="备份原厂固件"><a href="#备份原厂固件" class="headerlink" title="备份原厂固件"></a>备份原厂固件</h2><p>为避免刷错固件变砖等情况，强烈建议备份原厂固件。</p><p>打开命令提示符，执行 <code>adb reboot edl</code>，此时设备管理器中会多出高通 9008 设备。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576ce6c996b3.png"><img src="/2024/05/07/wifi-debian/6576ce6c996b3.png" alt="image-20231210221934063"></a></p><p>我们运行上文所提到的 <code>Loader.exe</code>（即 Miko 工具）进行备份数据。</p><p>此时窗口右侧显示设备信息，表明随身 WiFi 已被成功识别。如果显示 <strong>Not Found</strong> 字样，请重新安装 9008 驱动并再次尝试。</p><p>依次点击 <strong>Read</strong> –&gt;<strong>Partition Backup&#x2F;Erase</strong>–&gt;<strong>Load Partition Structure</strong>。然后双击红色 Option 下面的灰条，选择备份目录，并点击 <strong>Read Full Image</strong>。再次选择备份目录，并取一个文件名，点击确定，即可开始备份。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576ce79b5a9c.png"><img src="/2024/05/07/wifi-debian/6576ce79b5a9c.png" alt="image-20231210233137419"></a></p><p>等待几分钟，直到进度条达到 100%，右侧输出 Sucess 字样和用时，则表明备份完成 。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576ce8b43166.png"><img src="/2024/05/07/wifi-debian/6576ce8b43166.png" alt="image-20231210234948575"></a></p><h2 id="刷入-Debian"><a href="#刷入-Debian" class="headerlink" title="刷入 Debian"></a>刷入 Debian</h2><p>拔掉随身 WiFi 并重新插入 USB 接口，解压 Debian 刷机包。打开命令提示符，执行 <code>adb reboot bootloader</code> 进入 fastboot 模式。运行刷机包中的 <code>flash.bat</code>刷入系统，等待刷机完成。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576ce9854dd3.png"><img src="/2024/05/07/wifi-debian/6576ce9854dd3.png" alt="image-20231210235717253"></a></p><p>输出 <code>all done!</code> 则表明刷机完成。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576cea228405.png"><img src="/2024/05/07/wifi-debian/6576cea228405.png" alt="image-20231210235939348"></a></p><h2 id="安装-RNDIS-网络驱动"><a href="#安装-RNDIS-网络驱动" class="headerlink" title="安装 RNDIS 网络驱动"></a>安装 RNDIS 网络驱动</h2><p>重新插入随身 WiFI，打开任务管理器，在其他设备中会出现一个未知设备或以 RNDIS 开头的设备。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576ceae713b7.png"><img src="/2024/05/07/wifi-debian/6576ceae713b7.png" alt="image-20231211002244435"></a></p><p>右键，<strong>更新驱动程序</strong>–&gt;<strong>浏览我的电脑以查找驱动程序</strong>–&gt;<strong>让我从计算机上的可用驱动程序列表中选取</strong>–&gt;<strong>显示所有设备</strong>，等待列表加载完成。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576ced636acb.png"><img src="/2024/05/07/wifi-debian/6576ced636acb.png" alt="image-20231211002348468"></a></p><p>左侧选择 <strong>Microsoft</strong>，右侧选择 **基于远程 NDIS 的 Internet 共享设备，在弹出窗口中选择是，并确定。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576cee2bd3a7.png"><img src="/2024/05/07/wifi-debian/6576cee2bd3a7.png" alt="image-20231211002724457"></a></p><p>至此，RNDIS 驱动安装成功。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576cf3d95a0f.png"><img src="/2024/05/07/wifi-debian/6576cf3d95a0f.png" alt="image-20231211002850196"></a></p><h2 id="连接随身-WiFi-终端"><a href="#连接随身-WiFi-终端" class="headerlink" title="连接随身 WiFi 终端"></a>连接随身 WiFi 终端</h2><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576cf55d48de.png"><img src="/2024/05/07/wifi-debian/6576cf55d48de.png" alt="image-20231211004205761"></a></p><p>驱动安装成功后，电脑上会多出一个名叫 <code>4G_UFI_123456</code> 的 NDIS 设备，同时会出现一个同名的热点，密码为 <strong>12345678</strong>。</p><p>Debian 默认用户名为 user，密码为 1，root 密码也为 1。<strong>请务必及时修改密码（命令：passwd）。</strong></p><p>此时可以通过 adb 或 ssh 连接到 Debian 终端。</p><h3 id="通过-adb-连接"><a href="#通过-adb-连接" class="headerlink" title="通过 adb 连接"></a>通过 adb 连接</h3><p>将随身 WiFi 插入电脑 USB 接口，使用以下命令查看已连接 adb 设备：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br><span class="line">C:\Users\Thinkpad&gt;adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">0123456789      device</span><br></pre></td></tr></table></figure><p>有新设备出现时，使用以下指令进入 bash：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br></pre></td></tr></table></figure><p>通过 adb 连接时，使用 <code>nmtui</code>、<code>htop</code> 等需要显示图形的命令，可能会出现如下错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@openstick:/# nmtui</span><br><span class="line">TERM environment variable needs set.</span><br></pre></td></tr></table></figure><p>设置 <code>TERM</code> 环境变量即可解决。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export TERM=linux</span><br></pre></td></tr></table></figure><h3 id="通过-ssh-连接"><a href="#通过-ssh-连接" class="headerlink" title="通过 ssh 连接"></a>通过 ssh 连接</h3><p>将随身 WiFi 插入电脑 USB 接口或连接上随身 WiFi 的热点，使用以下指令进行连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@192.168.68.1</span><br></pre></td></tr></table></figure><p>如果连不上说明系统还在启动，请稍后再试。</p><h2 id="随身-WiFi-联网"><a href="#随身-WiFi-联网" class="headerlink" title="随身 WiFi 联网"></a>随身 WiFi 联网</h2><p>此时随身 WiFi 并没有联网，必须要关闭热点才能连接 WiFi。下面介绍详细步骤。</p><p>首先打开命令提示符，执行 <code>adb shell</code> 进入 Debian 终端。然后设置 TERM 环境变量：<code>export TERM=linux</code>。</p><p>执行 <code>nmtui</code>，选择“编辑连接”。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576cf5cb34d0.png"><img src="/2024/05/07/wifi-debian/6576cf5cb34d0.png" alt="image-20231211005030766"></a></p><p>左侧使用方向键选择 <code>bridge</code>，右侧选择“编辑”。并回车。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576cf6e3537f.png"><img src="/2024/05/07/wifi-debian/6576cf6e3537f.png" alt="image-20231211005119460"></a></p><p>删除其中的 <code>wifi</code>，并选择确定。。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576cf8484bd9.png"><img src="/2024/05/07/wifi-debian/6576cf8484bd9.png" alt="image-20231211005229505"></a></p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576cf944056e.png"><img src="/2024/05/07/wifi-debian/6576cf944056e.png" alt="image-20231211005307459"></a></p><p>返回，选择启用连接，则可连接 WiFi。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576cf9b13fd4.png"><img src="/2024/05/07/wifi-debian/6576cf9b13fd4.png" alt="img"></a></p><h2 id="优化系统"><a href="#优化系统" class="headerlink" title="优化系统"></a>优化系统</h2><p>删除无效软件包仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /etc/apt/sources.list.d/*</span><br></pre></td></tr></table></figure><p>删除多余软件包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt autopurge -y adoptopenjdk-8-hotspot</span><br></pre></td></tr></table></figure><p>更换软件源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt; /etc/apt/sources.list</span><br><span class="line">deb http://mirrors.ustc.edu.cn/debian/ bullseye main contrib non-free</span><br><span class="line"># deb-src http://mirrors.ustc.edu.cn/debian/ bullseye main contrib non-free</span><br><span class="line"></span><br><span class="line">deb http://mirrors.ustc.edu.cn/debian/ bullseye-updates main contrib non-free</span><br><span class="line"># deb-src http://mirrors.ustc.edu.cn/debian/ bullseye-updates main contrib non-free</span><br><span class="line"></span><br><span class="line">#deb http://mirrors.ustc.edu.cn/debian/ bullseye-backports main contrib non-free</span><br><span class="line"># deb-src http://mirrors.ustc.edu.cn/debian/ bullseye-backports main contrib non-free</span><br><span class="line"></span><br><span class="line">deb http://mirrors.ustc.edu.cn/debian-security/ bullseye-security main contrib non-free</span><br><span class="line"># deb-src http://mirrors.ustc.edu.cn/debian-security/ bullseye-security main contrib non-free</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>更新软件包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update &amp;&amp; apt upgrade -y</span><br></pre></td></tr></table></figure><p>安装常用软件包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install -y nano curl</span><br></pre></td></tr></table></figure><p>删除软件包缓存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt clean</span><br></pre></td></tr></table></figure><h2 id="关闭-LED-灯（可选）"><a href="#关闭-LED-灯（可选）" class="headerlink" title="关闭 LED 灯（可选）"></a>关闭 LED 灯（可选）</h2><p>随身 WiFi 开机后，LED 灯会不停地闪烁，如果不喜欢的话，执行以下命令即可关闭。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo none &gt; /sys/class/leds/blue:wifi/trigger</span><br><span class="line">echo none &gt; /sys/class/leds/red:os/trigger</span><br></pre></td></tr></table></figure><p>执行后会立即生效。为避免重启后失效，建议设置开机自动执行。</p><p>编辑 <code>/etc/rc.local</code> 文件，并将以上两行命令添加到 <code>exit 0</code> 之前，并保存。</p><p><a href="https://picgo-cdn.fallsoft.cn/i/2023/12/11/6576cfab93361.png"><img src="/2024/05/07/wifi-debian/6576cfab93361.png" alt="image-20231211155540049"></a></p><p>关于更多 LED 灯控制的高级用法，建议参考 <a href="https://blog.csdn.net/weixin_41099712/article/details/130836998">随身WIFI折腾日记(一)—霓虹灯</a> 这篇文章。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>感谢 HandsomeHacker 大佬的 <a href="https://github.com/OpenStick/OpenStick">OpenStick</a> 开源项目和苏苏小亮亮大佬的 <a href="https://www.kancloud.cn/a813630449/ufi_car/2795165">刷机包</a>，能在随身 WiFi 上用上 Linux 系统离不开他们的努力。</p>]]></content>
      
      
      <categories>
          
          <category> 实用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> armbian </tag>
            
            <tag> linux </tag>
            
            <tag> 刷机 </tag>
            
            <tag> 随身wifi刷debian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>anzhiyu主题配置</title>
      <link href="/2024/05/04/anzhiyu%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/05/04/anzhiyu%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h1><h2 id="搭建Hexo博客"><a href="#搭建Hexo博客" class="headerlink" title="搭建Hexo博客"></a>搭建Hexo博客</h2><p>如果你还没有Hexo博客，请按照Hexo官方文档进行安装、建站。</p><h2 id="作者的话"><a href="#作者的话" class="headerlink" title="作者的话"></a>作者的话</h2><p>请注意<code>_config.anzhiyu.yml</code>中的配置优先级大于<code>_config.yml</code>，所以更新主题后需要比对主题文件夹中的<code>theme/anzhiyu/_config.yml</code> 文件内容，一般在<a href="https://github.com/anzhiyu-c/hexo-theme-anzhiyu/releases">release</a> 的说明里会特别提示或给出配置文件版本对比diff，同步修改原配置文件即可。</p><blockquote><p>[Tip]</p><p>致题的新用户：</p><ul><li>本指南经过数个版本打磨，绝大部分的功能都有详细说明，请仔细阅读，节约自己和他人的时间；</li><li>本指南中提到的：”<strong>站点配置</strong>“ 指的 <code>Hexo</code> 博客目录下的 <code>_config.yml</code>，”<strong>主题配置</strong>“ 指的是 <code>theme/anzhiyu/_config.yml</code> 或者 <code>_config.anzhiyu.yml</code> ，注意区分；</li><li>本指南中提到的 <code>source</code> 目录都指的是博客目录下的 <code>source</code> 文件夹，不推荐修改主题内 <code>source</code> 目录；</li><li>每次无论 <code>hexo g</code> 或 <code>hexo s</code>，都最好先使用 <code>hexo clean</code> 清除本地缓存；</li><li>页面结果以本地 <code>hexo s</code> 为准，部署后的异常大部分是线上缓存原因，在确认没有报错的情况下，等待若干时间后即可正常；</li><li>由于主题的不同版本会存在配置差异，本指南以最新版本为准。</li></ul></blockquote><p>本指南不包括所有的配置说明，几乎每个配置在主题配置中都有注释，可配合指南共同参考使用。</p><p>另外本指南仅包含主题范围内的使用说明，如果是 Hexo 的使用或者 Hexo 插件的使用，请查阅各自的文档。</p><p>若存在其他主题相关的疑问请在 <a href="https://github.com/anzhiyu-c/hexo-theme-anzhiyu/issues/new">issues</a> 留言。</p><h2 id="主题安装-1"><a href="#主题安装-1" class="headerlink" title="主题安装"></a>主题安装</h2><blockquote><p>[温馨提示]</p><p>Anzhiyu主题拥有<strong>Main</strong>(稳定版)和<strong>Dev</strong>(测试版)两种版本, 我们推荐您安装使用<strong>Github</strong>(稳定版)以获得最佳的主题体验</p></blockquote><h3 id="方式一-Github-推荐"><a href="#方式一-Github-推荐" class="headerlink" title="方式一(Github 推荐):"></a><strong>方式一(Github 推荐):</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b main https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git themes/anzhiyu</span><br></pre></td></tr></table></figure><p>如遇安装不上可以使用以下url代理安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b main https://ghproxy.com/https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git themes/anzhiyu</span><br></pre></td></tr></table></figure><h3 id="方式二-Release-推荐"><a href="#方式二-Release-推荐" class="headerlink" title="方式二(Release 推荐):"></a><strong>方式二(Release 推荐):</strong></h3><p>下载 <a href="https://github.com/anzhiyu-c/hexo-theme-anzhiyu/releases">最新 release 版本</a> 解压到 <code>themes</code> 目录，并将解压出的文件夹重命名为 <code>anzhiyu</code>。</p><h3 id="方式三-npm安装"><a href="#方式三-npm安装" class="headerlink" title="方式三(npm安装):"></a><strong>方式三(npm安装):</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-theme-anzhiyu</span><br></pre></td></tr></table></figure><p>此方法只支持 Hexo 5.0.0 以上版本 通过 npm 安装并不会在 themes 里生成主题文件夹，而是在 node_modules 里生成</p><h3 id="测试版Dev"><a href="#测试版Dev" class="headerlink" title="测试版Dev"></a><strong>测试版Dev</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b dev https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git themes/anzhiyu</span><br></pre></td></tr></table></figure><p>测试版可能存在 bug，追求稳定的请安装稳定版</p><h2 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h2><p>打开 <strong>Hexo</strong> 根目录下的 <code>config.yml</code>, 找到以下配置项，把主题改为<code>anzhiyu</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">anzhiyu</span></span><br></pre></td></tr></table></figure><h2 id="安装-pug-和-stylus-渲染插件"><a href="#安装-pug-和-stylus-渲染插件" class="headerlink" title="安装 pug 和 stylus 渲染插件"></a>安装 pug 和 stylus 渲染插件<a href="https://docs.anheyu.com/initall.html#%E5%AE%89%E8%A3%85-pug-%E5%92%8C-stylus-%E6%B8%B2%E6%9F%93%E6%8F%92%E4%BB%B6"></a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>无法安装可以使用cnpm进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save --registry=http://registry.npmmirror.com</span><br></pre></td></tr></table></figure><h2 id="覆盖配置"><a href="#覆盖配置" class="headerlink" title="覆盖配置"></a>覆盖配置<a href="https://docs.anheyu.com/initall.html#%E8%A6%86%E7%9B%96%E9%85%8D%E7%BD%AE"></a></h2><p>覆盖配置可以使<code>主题配置</code>放置在 anzhiyu 目录之外，避免在更新主题时丢失自定义的配置。</p><p>通过 Npm 安装主题的用户可忽略，其他用户建议学习使用。</p><ul><li>macos&#x2F;linux 在博客根目录运行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -rf ./themes/anzhiyu/_config.yml ./_config.anzhiyu.yml</span><br></pre></td></tr></table></figure><ul><li>windows 复制<code>/themes/anzhiyu/_config.yml</code>此文件到 hexo 根目录，并重命名为<code>_config.anzhiyu.yml</code></li></ul><p>以后如果修改任何主题配置，都只需修改 _config.anzhiyu.yml 的配置即可。</p><p>注意：</p><ul><li>只要存在于 <code>_config.anzhiyu.yml</code> 的配置都是高优先级，修改原 <code>_config.yml</code> 是无效的。</li><li>每次更新主题可能存在配置变更，请注意更新说明，可能需要手动对 <code>_config.anzhiyu.yml</code> 同步修改。</li><li>想查看覆盖配置有没有生效，可以通过 <code>hexo g --debug</code> 查看命令行输出。</li><li>如果想将某些配置覆盖为空，注意不要把主键删掉，不然是无法覆盖的</li></ul><h2 id="本地启动-hexo"><a href="#本地启动-hexo" class="headerlink" title="本地启动 hexo"></a>本地启动 hexo<a href="https://docs.anheyu.com/initall.html#%E6%9C%AC%E5%9C%B0%E5%90%AF%E5%8A%A8-hexo"></a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>此时就能在看到效果了。</p><h2 id="升级方法"><a href="#升级方法" class="headerlink" title="升级方法"></a>升级方法<a href="https://docs.anheyu.com/initall.html#%E5%8D%87%E7%BA%A7%E6%96%B9%E6%B3%95"></a></h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a><strong>方式一</strong></h3><blockquote><p>适用于通过 Github 或 Release 压缩包主题，且没有自行修改任何代码的情况。</p></blockquote><ol><li>先将原文件夹重命名为别的名称，例如 <code>anzhiyu-bkp</code>，用于升级失败进行回退；</li><li>选择自己的安装方式升级</li></ol><p><code>Github</code>：重新重新执行安装命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b main https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git themes/anzhiyu</span><br></pre></td></tr></table></figure><p><code>Release</code>：按照安装步骤，下载 <a href="https://github.com/anzhiyu-c/hexo-theme-anzhiyu/releases">release</a> 并解压重命名为 <code>anzhiyu</code>；</p><ol><li>比对升级后的配置文件<code>_config.yml</code>，如果某些配置发生了变化（改名或弃用），<a href="https://github.com/anzhiyu-c/hexo-theme-anzhiyu/releases">release</a> 的说明里会特别提示或给出配置文件版本对比diff，同步修改原配置文件即可。</li></ol><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a><strong>方式二</strong></h3><blockquote><p>适用于通过 Npm 安装主题。</p></blockquote><p>在博客目录下执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update --save hexo-theme-anzhiyu</span><br></pre></td></tr></table></figure><p>比对升级后的配置文件<code>_config.yml</code>,如果某些配置发生了变化（改名或弃用），<a href="https://github.com/anzhiyu-c/hexo-theme-anzhiyu/releases">release</a> 的说明里会特别提示或给出配置文件版本对比diff，同步修改原配置文件即可。</p><h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a><strong>方式三</strong></h3><p>全量更新：删除<strong>theme&#x2F;anzhiyu</strong>文件夹，然后重新执行安装命令即可。</p><p>比对升级后的配置文件<code>_config.yml</code>,如果某些配置发生了变化（改名或弃用），<a href="https://github.com/anzhiyu-c/hexo-theme-anzhiyu/releases">release</a> 的说明里会特别提示或给出配置文件版本对比diff，同步修改原配置文件即可。</p>]]></content>
      
      
      <categories>
          
          <category> 实用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>侧边栏添加个性时钟</title>
      <link href="/2024/04/19/%E4%BE%A7%E8%BE%B9%E6%A0%8F%E6%B7%BB%E5%8A%A0%E4%B8%AA%E6%80%A7%E6%97%B6%E9%92%9F/"/>
      <url>/2024/04/19/%E4%BE%A7%E8%BE%B9%E6%A0%8F%E6%B7%BB%E5%8A%A0%E4%B8%AA%E6%80%A7%E6%97%B6%E9%92%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><p>创建 <table><tr><td bgcolor="PowderBlue">[themes]&#x2F;source&#x2F;js&#x2F;custom&#x2F;digit-clock.js</td></tr></table> 文件，在其中添加如下内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个包含10个元素的数组，每个元素的值为索引  </span></span><br><span class="line"><span class="keyword">var</span> _time10 = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(<span class="number">10</span>)).<span class="title function_">map</span>(<span class="function">(<span class="params">n, i</span>) =&gt;</span> i);</span><br><span class="line"><span class="comment">// 创建一个包含前6个元素的数组，作为时间的小时和分钟  </span></span><br><span class="line"><span class="keyword">var</span> _time6 = _time10.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"><span class="comment">// 创建一个包含前3个元素的数组，作为时间的秒钟  </span></span><br><span class="line"><span class="keyword">var</span> _time3 = _time10.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// 创建一个包含3个子数组的二维数组，用于表示时钟的结构  </span></span><br><span class="line"><span class="keyword">var</span> _Structure = [</span><br><span class="line">    [_time3, _time10],</span><br><span class="line">    [_time6, _time10],</span><br><span class="line">    [_time6, _time10]</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 创建一个div元素作为时钟的容器，并设置id为&#x27;clock&#x27;  </span></span><br><span class="line"><span class="keyword">var</span> clock = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">clock.<span class="property">id</span> = <span class="string">&#x27;clock&#x27;</span>;</span><br><span class="line"><span class="comment">// 将时钟容器添加到元素中元素中  </span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;digit-clock&quot;</span>).<span class="title function_">appendChild</span>(clock);</span><br><span class="line"><span class="comment">// 创建一个数组用于存储每个数字组的div元素  </span></span><br><span class="line"><span class="keyword">var</span> digitGroups = [];</span><br><span class="line"><span class="comment">// 请求动画帧并调用update函数  </span></span><br><span class="line"><span class="title function_">requestAnimationFrame</span>(update);</span><br><span class="line"><span class="comment">// 遍历_Structure数组  </span></span><br><span class="line">_Structure.<span class="title function_">forEach</span>(<span class="function"><span class="params">digits</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个div元素作为数字组的容器，并添加类名&#x27;digit-group&#x27;  </span></span><br><span class="line">    <span class="keyword">var</span> digitGroup = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    digitGroup.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;digit-group&#x27;</span>);</span><br><span class="line">    <span class="comment">// 将数字组的容器添加到时钟容器中，并将其添加到digitGroups数组中  </span></span><br><span class="line">    clock.<span class="title function_">appendChild</span>(digitGroup);</span><br><span class="line">    digitGroups.<span class="title function_">push</span>(digitGroup);</span><br><span class="line">    <span class="comment">// 遍历digits数组  </span></span><br><span class="line">    digits.<span class="title function_">forEach</span>(<span class="function"><span class="params">digitList</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个div元素作为数字的容器，并添加类名&#x27;digit&#x27;  </span></span><br><span class="line">        <span class="keyword">var</span> digit = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        digit.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;digit&#x27;</span>);</span><br><span class="line">        <span class="comment">// 遍历digitList数组  </span></span><br><span class="line">        digitList.<span class="title function_">forEach</span>(<span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 创建一个div元素作为数字的子元素，并添加类名&#x27;digit-number&#x27;，设置文本内容为n  </span></span><br><span class="line">            <span class="keyword">var</span> ele = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">            ele.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;digit-number&#x27;</span>);</span><br><span class="line">            ele.<span class="property">innerText</span> = n;</span><br><span class="line">            <span class="comment">// 将数字的子元素添加到数字的容器中  </span></span><br><span class="line">            digit.<span class="title function_">appendChild</span>(ele);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 将数字的容器添加到数字组的容器中  </span></span><br><span class="line">        digitGroup.<span class="title function_">appendChild</span>(digit);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 定义update函数  </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 请求动画帧并调用update函数  </span></span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(update);</span><br><span class="line">    <span class="comment">// 创建一个Date对象表示当前时间  </span></span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="comment">// 获取当前时间的小时、分钟和秒钟，并将它们转换为两位数的字符串数组  </span></span><br><span class="line">    <span class="keyword">var</span> time = [date.<span class="title function_">getHours</span>(), date.<span class="title function_">getMinutes</span>(), date.<span class="title function_">getSeconds</span>()].</span><br><span class="line">        <span class="title function_">map</span>(<span class="function"><span class="params">n</span> =&gt;</span> <span class="string">`0<span class="subst">$&#123;n&#125;</span>`</span>.<span class="title function_">slice</span>(-<span class="number">2</span>).<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">e</span> =&gt;</span> +e)).</span><br><span class="line">        <span class="title function_">reduce</span>(<span class="function">(<span class="params">p, n</span>) =&gt;</span> p.<span class="title function_">concat</span>(n), []);</span><br><span class="line">    <span class="comment">// 遍历time数组  </span></span><br><span class="line">    time.<span class="title function_">forEach</span>(<span class="function">(<span class="params">n, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> digit = digitGroups[<span class="title class_">Math</span>.<span class="title function_">floor</span>(i * <span class="number">0.5</span>)].<span class="property">children</span>[i % <span class="number">2</span>].<span class="property">children</span>;</span><br><span class="line">        <span class="comment">// 遍历数字组的子元素  </span></span><br><span class="line">        <span class="title class_">Array</span>.<span class="title function_">from</span>(digit).<span class="title function_">forEach</span>(<span class="function">(<span class="params">e, i2</span>) =&gt;</span> e.<span class="property">classList</span>[i2 === n ? <span class="string">&#x27;add&#x27;</span> : <span class="string">&#x27;remove&#x27;</span>](<span class="string">&#x27;bright&#x27;</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 <table><tr><td bgcolor="PowderBlue">[themes]&#x2F;source&#x2F;css&#x2F;custom&#x2F;digit-clock.css</td></tr></table> 文件，在其中添加如下内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#digit-clock</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#clock</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.digit-group</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.digit-group</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:last-child</span>)<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: inherit;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;:&quot;</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.digit</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">33px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.digit</span> <span class="selector-class">.digit-number</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: inherit;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transition</span>: font-size <span class="number">200ms</span>,transform <span class="number">350ms</span>,color <span class="number">150ms</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.digit</span> <span class="selector-class">.digit-number</span><span class="selector-class">.bright</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: inherit;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 <table><tr><td bgcolor="PowderBlue">[blog]&#x2F;source&#x2F;_data&#x2F;widget.yml</td></tr></table>文件，在其中添加如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">top:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">card-clock</span></span><br><span class="line">    <span class="attr">id_name:</span></span><br><span class="line">    <span class="attr">name:</span></span><br><span class="line">    <span class="attr">icon:</span> </span><br><span class="line">    <span class="attr">order:</span></span><br><span class="line">    <span class="attr">html:</span> <span class="string">&lt;div</span> <span class="string">id=&quot;digit-clock&quot;&gt;&lt;/div&gt;&lt;script</span> <span class="string">defer</span> <span class="string">async</span> <span class="string">data-pjax</span> <span class="string">src=&quot;/js/custom/digit-clock.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p><font size="5">假如你想除了文章页面都显示时钟就将 <font color="Blue">top</font> 改成 <font color="Blue">Bottom</font><br>可以通过修改 <font color="Blue">opder</font> 的值来为你的侧边栏进行排序<br>假如你使用 <font color="Blue">gulp</font> 压缩资源，可能会导致无法运行，修改 <font color="Blue">gulpfile.js</font>(我这里是使用的空梦的<font color="Blue"><a href="https://kmar.top/posts/7d9fb37e/">gulp</a></font> ):</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 压缩js</span></span><br><span class="line"><span class="comment">// 参数 doc：https://github.com/terser-js/terser#minify-options</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-js&#x27;</span>, <span class="function">() =&gt;</span></span><br><span class="line">    gulp.<span class="title function_">src</span>([<span class="string">&#x27;./public/**/*.js&#x27;</span>,<span class="string">&#x27;!./public/**/digit-clock.js&#x27;</span>])</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">terser</span>(&#123;</span><br><span class="line">            <span class="attr">compress</span>: &#123;</span><br><span class="line">                <span class="comment">/** <span class="doctag">@see</span> https://blog.csdn.net/weixin_39842528/article/details/81390588 */</span></span><br><span class="line">                <span class="attr">sequences</span>: <span class="number">50</span>,</span><br><span class="line">                <span class="attr">unsafe</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">unsafe_math</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">pure_getters</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">ecma</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><font size="5">我们可以在 <font color="Blue">gulp.src</font> 中添加一个 <font color="Blue">!.&#x2F;public&#x2F;path&#x2F;to&#x2F;your&#x2F;file.js</font> 来排除某个文件。这意味着 <font color="Blue">Gulp</font> 将会处理<font color="Blue">.&#x2F;public&#x2F;**&#x2F;*.js</font> 匹配的所有文件，除了<font color="Blue">.&#x2F;public&#x2F;path&#x2F;to&#x2F;your&#x2F;file.js</font>。</font></p>]]></content>
      
      
      <categories>
          
          <category> 实用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2024/04/19/test/"/>
      <url>/2024/04/19/test/</url>
      
        <content type="html"><![CDATA[<p>##这是我的第一篇文章</p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Blog</title>
      <link href="/2024/04/18/hello-world/"/>
      <url>/2024/04/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
